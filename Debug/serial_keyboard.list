
serial_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008024  08008024  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800802c  0800802c  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000174  080081a8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  080081a8  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e89  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5a  00000000  00000000  0003102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e3  00000000  00000000  00035480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116cd  00000000  00000000  0004d863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c90  00000000  00000000  0005ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038dc  00000000  00000000  000e7c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f6c 	.word	0x08007f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	08007f6c 	.word	0x08007f6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <type>:
void type(uint8_t c);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void type(uint8_t c) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (c >= 0x41 && c <= 0x5A) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b40      	cmp	r3, #64	; 0x40
 80005a2:	d91e      	bls.n	80005e2 <type+0x4e>
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b5a      	cmp	r3, #90	; 0x5a
 80005a8:	d81b      	bhi.n	80005e2 <type+0x4e>
		// Letra maiúscula
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 80005aa:	4ba8      	ldr	r3, [pc, #672]	; (800084c <type+0x2b8>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = c - 0x3D;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	3b3d      	subs	r3, #61	; 0x3d
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4ba5      	ldr	r3, [pc, #660]	; (800084c <type+0x2b8>)
 80005b8:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005ba:	2208      	movs	r2, #8
 80005bc:	49a3      	ldr	r1, [pc, #652]	; (800084c <type+0x2b8>)
 80005be:	48a4      	ldr	r0, [pc, #656]	; (8000850 <type+0x2bc>)
 80005c0:	f005 f878 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80005c4:	200f      	movs	r0, #15
 80005c6:	f000 fc95 	bl	8000ef4 <HAL_Delay>
		// Liberar teclas
		HIDKeyboardReport.modifier = 0x00;
 80005ca:	4ba0      	ldr	r3, [pc, #640]	; (800084c <type+0x2b8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 80005d0:	4b9e      	ldr	r3, [pc, #632]	; (800084c <type+0x2b8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005d6:	2208      	movs	r2, #8
 80005d8:	499c      	ldr	r1, [pc, #624]	; (800084c <type+0x2b8>)
 80005da:	489d      	ldr	r0, [pc, #628]	; (8000850 <type+0x2bc>)
 80005dc:	f005 f86a 	bl	80056b4 <USBD_HID_SendReport>
 80005e0:	e1fd      	b.n	80009de <type+0x44a>
	} else if (c >= 0x61 && c <= 0x7A) {
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b60      	cmp	r3, #96	; 0x60
 80005e6:	d918      	bls.n	800061a <type+0x86>
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b7a      	cmp	r3, #122	; 0x7a
 80005ec:	d815      	bhi.n	800061a <type+0x86>
		// Letra minúscula
		HIDKeyboardReport.keyCode1 = c - 0x5D;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	3b5d      	subs	r3, #93	; 0x5d
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b95      	ldr	r3, [pc, #596]	; (800084c <type+0x2b8>)
 80005f6:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005f8:	2208      	movs	r2, #8
 80005fa:	4994      	ldr	r1, [pc, #592]	; (800084c <type+0x2b8>)
 80005fc:	4894      	ldr	r0, [pc, #592]	; (8000850 <type+0x2bc>)
 80005fe:	f005 f859 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000602:	200f      	movs	r0, #15
 8000604:	f000 fc76 	bl	8000ef4 <HAL_Delay>
		// Liberar tecla
		HIDKeyboardReport.keyCode1 = 0x00;
 8000608:	4b90      	ldr	r3, [pc, #576]	; (800084c <type+0x2b8>)
 800060a:	2200      	movs	r2, #0
 800060c:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800060e:	2208      	movs	r2, #8
 8000610:	498e      	ldr	r1, [pc, #568]	; (800084c <type+0x2b8>)
 8000612:	488f      	ldr	r0, [pc, #572]	; (8000850 <type+0x2bc>)
 8000614:	f005 f84e 	bl	80056b4 <USBD_HID_SendReport>
 8000618:	e1e1      	b.n	80009de <type+0x44a>
	} else if (c >= 0x31 && c <= 0x39) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b30      	cmp	r3, #48	; 0x30
 800061e:	d918      	bls.n	8000652 <type+0xbe>
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b39      	cmp	r3, #57	; 0x39
 8000624:	d815      	bhi.n	8000652 <type+0xbe>
		// Dígito de 1 a 9
		HIDKeyboardReport.keyCode1 = c - 0x13;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b13      	subs	r3, #19
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b87      	ldr	r3, [pc, #540]	; (800084c <type+0x2b8>)
 800062e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000630:	2208      	movs	r2, #8
 8000632:	4986      	ldr	r1, [pc, #536]	; (800084c <type+0x2b8>)
 8000634:	4886      	ldr	r0, [pc, #536]	; (8000850 <type+0x2bc>)
 8000636:	f005 f83d 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800063a:	200f      	movs	r0, #15
 800063c:	f000 fc5a 	bl	8000ef4 <HAL_Delay>
		// Liberar tecla
		HIDKeyboardReport.keyCode1 = 0x00;
 8000640:	4b82      	ldr	r3, [pc, #520]	; (800084c <type+0x2b8>)
 8000642:	2200      	movs	r2, #0
 8000644:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000646:	2208      	movs	r2, #8
 8000648:	4980      	ldr	r1, [pc, #512]	; (800084c <type+0x2b8>)
 800064a:	4881      	ldr	r0, [pc, #516]	; (8000850 <type+0x2bc>)
 800064c:	f005 f832 	bl	80056b4 <USBD_HID_SendReport>
 8000650:	e1c5      	b.n	80009de <type+0x44a>
	} else if (c == 0x30) {
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b30      	cmp	r3, #48	; 0x30
 8000656:	d113      	bne.n	8000680 <type+0xec>
		// Dígito 0
		HIDKeyboardReport.keyCode1 = 0x27;
 8000658:	4b7c      	ldr	r3, [pc, #496]	; (800084c <type+0x2b8>)
 800065a:	2227      	movs	r2, #39	; 0x27
 800065c:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800065e:	2208      	movs	r2, #8
 8000660:	497a      	ldr	r1, [pc, #488]	; (800084c <type+0x2b8>)
 8000662:	487b      	ldr	r0, [pc, #492]	; (8000850 <type+0x2bc>)
 8000664:	f005 f826 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000668:	200f      	movs	r0, #15
 800066a:	f000 fc43 	bl	8000ef4 <HAL_Delay>
		// Liberar tecla
		HIDKeyboardReport.keyCode1 = 0x00;
 800066e:	4b77      	ldr	r3, [pc, #476]	; (800084c <type+0x2b8>)
 8000670:	2200      	movs	r2, #0
 8000672:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000674:	2208      	movs	r2, #8
 8000676:	4975      	ldr	r1, [pc, #468]	; (800084c <type+0x2b8>)
 8000678:	4875      	ldr	r0, [pc, #468]	; (8000850 <type+0x2bc>)
 800067a:	f005 f81b 	bl	80056b4 <USBD_HID_SendReport>
		// Liberar teclas
		HIDKeyboardReport.modifier = 0x00;
		HIDKeyboardReport.keyCode1 = 0x00;
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
	}
}
 800067e:	e1ae      	b.n	80009de <type+0x44a>
	} else if (c == 0x20) {
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b20      	cmp	r3, #32
 8000684:	d113      	bne.n	80006ae <type+0x11a>
		HIDKeyboardReport.keyCode1 = 0x2C;
 8000686:	4b71      	ldr	r3, [pc, #452]	; (800084c <type+0x2b8>)
 8000688:	222c      	movs	r2, #44	; 0x2c
 800068a:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800068c:	2208      	movs	r2, #8
 800068e:	496f      	ldr	r1, [pc, #444]	; (800084c <type+0x2b8>)
 8000690:	486f      	ldr	r0, [pc, #444]	; (8000850 <type+0x2bc>)
 8000692:	f005 f80f 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 fc2c 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 800069c:	4b6b      	ldr	r3, [pc, #428]	; (800084c <type+0x2b8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006a2:	2208      	movs	r2, #8
 80006a4:	4969      	ldr	r1, [pc, #420]	; (800084c <type+0x2b8>)
 80006a6:	486a      	ldr	r0, [pc, #424]	; (8000850 <type+0x2bc>)
 80006a8:	f005 f804 	bl	80056b4 <USBD_HID_SendReport>
}
 80006ac:	e197      	b.n	80009de <type+0x44a>
	} else if (c == 0x0D) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b0d      	cmp	r3, #13
 80006b2:	d113      	bne.n	80006dc <type+0x148>
		HIDKeyboardReport.keyCode1 = 0x28;
 80006b4:	4b65      	ldr	r3, [pc, #404]	; (800084c <type+0x2b8>)
 80006b6:	2228      	movs	r2, #40	; 0x28
 80006b8:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006ba:	2208      	movs	r2, #8
 80006bc:	4963      	ldr	r1, [pc, #396]	; (800084c <type+0x2b8>)
 80006be:	4864      	ldr	r0, [pc, #400]	; (8000850 <type+0x2bc>)
 80006c0:	f004 fff8 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fc15 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 80006ca:	4b60      	ldr	r3, [pc, #384]	; (800084c <type+0x2b8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006d0:	2208      	movs	r2, #8
 80006d2:	495e      	ldr	r1, [pc, #376]	; (800084c <type+0x2b8>)
 80006d4:	485e      	ldr	r0, [pc, #376]	; (8000850 <type+0x2bc>)
 80006d6:	f004 ffed 	bl	80056b4 <USBD_HID_SendReport>
}
 80006da:	e180      	b.n	80009de <type+0x44a>
	} else if (c == 0x1B) {
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b1b      	cmp	r3, #27
 80006e0:	d113      	bne.n	800070a <type+0x176>
		HIDKeyboardReport.keyCode1 = 0x29;
 80006e2:	4b5a      	ldr	r3, [pc, #360]	; (800084c <type+0x2b8>)
 80006e4:	2229      	movs	r2, #41	; 0x29
 80006e6:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006e8:	2208      	movs	r2, #8
 80006ea:	4958      	ldr	r1, [pc, #352]	; (800084c <type+0x2b8>)
 80006ec:	4858      	ldr	r0, [pc, #352]	; (8000850 <type+0x2bc>)
 80006ee:	f004 ffe1 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 fbfe 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 80006f8:	4b54      	ldr	r3, [pc, #336]	; (800084c <type+0x2b8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006fe:	2208      	movs	r2, #8
 8000700:	4952      	ldr	r1, [pc, #328]	; (800084c <type+0x2b8>)
 8000702:	4853      	ldr	r0, [pc, #332]	; (8000850 <type+0x2bc>)
 8000704:	f004 ffd6 	bl	80056b4 <USBD_HID_SendReport>
}
 8000708:	e169      	b.n	80009de <type+0x44a>
	} else if (c == 0x09) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b09      	cmp	r3, #9
 800070e:	d113      	bne.n	8000738 <type+0x1a4>
		HIDKeyboardReport.keyCode1 = 0x2B;
 8000710:	4b4e      	ldr	r3, [pc, #312]	; (800084c <type+0x2b8>)
 8000712:	222b      	movs	r2, #43	; 0x2b
 8000714:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000716:	2208      	movs	r2, #8
 8000718:	494c      	ldr	r1, [pc, #304]	; (800084c <type+0x2b8>)
 800071a:	484d      	ldr	r0, [pc, #308]	; (8000850 <type+0x2bc>)
 800071c:	f004 ffca 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000720:	200f      	movs	r0, #15
 8000722:	f000 fbe7 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 8000726:	4b49      	ldr	r3, [pc, #292]	; (800084c <type+0x2b8>)
 8000728:	2200      	movs	r2, #0
 800072a:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800072c:	2208      	movs	r2, #8
 800072e:	4947      	ldr	r1, [pc, #284]	; (800084c <type+0x2b8>)
 8000730:	4847      	ldr	r0, [pc, #284]	; (8000850 <type+0x2bc>)
 8000732:	f004 ffbf 	bl	80056b4 <USBD_HID_SendReport>
}
 8000736:	e152      	b.n	80009de <type+0x44a>
	} else if (c == 0x7F) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b7f      	cmp	r3, #127	; 0x7f
 800073c:	d113      	bne.n	8000766 <type+0x1d2>
		HIDKeyboardReport.keyCode1 = 0x2A;
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <type+0x2b8>)
 8000740:	222a      	movs	r2, #42	; 0x2a
 8000742:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000744:	2208      	movs	r2, #8
 8000746:	4941      	ldr	r1, [pc, #260]	; (800084c <type+0x2b8>)
 8000748:	4841      	ldr	r0, [pc, #260]	; (8000850 <type+0x2bc>)
 800074a:	f004 ffb3 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800074e:	200f      	movs	r0, #15
 8000750:	f000 fbd0 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 8000754:	4b3d      	ldr	r3, [pc, #244]	; (800084c <type+0x2b8>)
 8000756:	2200      	movs	r2, #0
 8000758:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800075a:	2208      	movs	r2, #8
 800075c:	493b      	ldr	r1, [pc, #236]	; (800084c <type+0x2b8>)
 800075e:	483c      	ldr	r0, [pc, #240]	; (8000850 <type+0x2bc>)
 8000760:	f004 ffa8 	bl	80056b4 <USBD_HID_SendReport>
}
 8000764:	e13b      	b.n	80009de <type+0x44a>
	} else if (c == 0x2D) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b2d      	cmp	r3, #45	; 0x2d
 800076a:	d113      	bne.n	8000794 <type+0x200>
		HIDKeyboardReport.keyCode1 = 0x2D;
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <type+0x2b8>)
 800076e:	222d      	movs	r2, #45	; 0x2d
 8000770:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000772:	2208      	movs	r2, #8
 8000774:	4935      	ldr	r1, [pc, #212]	; (800084c <type+0x2b8>)
 8000776:	4836      	ldr	r0, [pc, #216]	; (8000850 <type+0x2bc>)
 8000778:	f004 ff9c 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800077c:	200f      	movs	r0, #15
 800077e:	f000 fbb9 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <type+0x2b8>)
 8000784:	2200      	movs	r2, #0
 8000786:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000788:	2208      	movs	r2, #8
 800078a:	4930      	ldr	r1, [pc, #192]	; (800084c <type+0x2b8>)
 800078c:	4830      	ldr	r0, [pc, #192]	; (8000850 <type+0x2bc>)
 800078e:	f004 ff91 	bl	80056b4 <USBD_HID_SendReport>
}
 8000792:	e124      	b.n	80009de <type+0x44a>
	} else if (c == 0x2E) {
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b2e      	cmp	r3, #46	; 0x2e
 8000798:	d113      	bne.n	80007c2 <type+0x22e>
		HIDKeyboardReport.keyCode1 = 0x37;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <type+0x2b8>)
 800079c:	2237      	movs	r2, #55	; 0x37
 800079e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007a0:	2208      	movs	r2, #8
 80007a2:	492a      	ldr	r1, [pc, #168]	; (800084c <type+0x2b8>)
 80007a4:	482a      	ldr	r0, [pc, #168]	; (8000850 <type+0x2bc>)
 80007a6:	f004 ff85 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 fba2 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <type+0x2b8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007b6:	2208      	movs	r2, #8
 80007b8:	4924      	ldr	r1, [pc, #144]	; (800084c <type+0x2b8>)
 80007ba:	4825      	ldr	r0, [pc, #148]	; (8000850 <type+0x2bc>)
 80007bc:	f004 ff7a 	bl	80056b4 <USBD_HID_SendReport>
}
 80007c0:	e10d      	b.n	80009de <type+0x44a>
	} else if (c == 0x2F) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b2f      	cmp	r3, #47	; 0x2f
 80007c6:	d113      	bne.n	80007f0 <type+0x25c>
		HIDKeyboardReport.keyCode1 = 0x38;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <type+0x2b8>)
 80007ca:	2238      	movs	r2, #56	; 0x38
 80007cc:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007ce:	2208      	movs	r2, #8
 80007d0:	491e      	ldr	r1, [pc, #120]	; (800084c <type+0x2b8>)
 80007d2:	481f      	ldr	r0, [pc, #124]	; (8000850 <type+0x2bc>)
 80007d4:	f004 ff6e 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80007d8:	200f      	movs	r0, #15
 80007da:	f000 fb8b 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <type+0x2b8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007e4:	2208      	movs	r2, #8
 80007e6:	4919      	ldr	r1, [pc, #100]	; (800084c <type+0x2b8>)
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <type+0x2bc>)
 80007ea:	f004 ff63 	bl	80056b4 <USBD_HID_SendReport>
}
 80007ee:	e0f6      	b.n	80009de <type+0x44a>
	} else if (c == 0x5C) {
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b5c      	cmp	r3, #92	; 0x5c
 80007f4:	d113      	bne.n	800081e <type+0x28a>
		HIDKeyboardReport.keyCode1 = 0x31;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <type+0x2b8>)
 80007f8:	2231      	movs	r2, #49	; 0x31
 80007fa:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007fc:	2208      	movs	r2, #8
 80007fe:	4913      	ldr	r1, [pc, #76]	; (800084c <type+0x2b8>)
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <type+0x2bc>)
 8000802:	f004 ff57 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000806:	200f      	movs	r0, #15
 8000808:	f000 fb74 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <type+0x2b8>)
 800080e:	2200      	movs	r2, #0
 8000810:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000812:	2208      	movs	r2, #8
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <type+0x2b8>)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <type+0x2bc>)
 8000818:	f004 ff4c 	bl	80056b4 <USBD_HID_SendReport>
}
 800081c:	e0df      	b.n	80009de <type+0x44a>
	} else if (c == 0x3D) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b3d      	cmp	r3, #61	; 0x3d
 8000822:	d117      	bne.n	8000854 <type+0x2c0>
		HIDKeyboardReport.keyCode1 = 0x2E;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <type+0x2b8>)
 8000826:	222e      	movs	r2, #46	; 0x2e
 8000828:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800082a:	2208      	movs	r2, #8
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <type+0x2b8>)
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <type+0x2bc>)
 8000830:	f004 ff40 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000834:	200f      	movs	r0, #15
 8000836:	f000 fb5d 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <type+0x2b8>)
 800083c:	2200      	movs	r2, #0
 800083e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000840:	2208      	movs	r2, #8
 8000842:	4902      	ldr	r1, [pc, #8]	; (800084c <type+0x2b8>)
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <type+0x2bc>)
 8000846:	f004 ff35 	bl	80056b4 <USBD_HID_SendReport>
}
 800084a:	e0c8      	b.n	80009de <type+0x44a>
 800084c:	200001d4 	.word	0x200001d4
 8000850:	200001e8 	.word	0x200001e8
	} else if (c == 0x27) {
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b27      	cmp	r3, #39	; 0x27
 8000858:	d113      	bne.n	8000882 <type+0x2ee>
		HIDKeyboardReport.keyCode1 = 0x34;
 800085a:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <type+0x454>)
 800085c:	2234      	movs	r2, #52	; 0x34
 800085e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000860:	2208      	movs	r2, #8
 8000862:	4961      	ldr	r1, [pc, #388]	; (80009e8 <type+0x454>)
 8000864:	4861      	ldr	r0, [pc, #388]	; (80009ec <type+0x458>)
 8000866:	f004 ff25 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800086a:	200f      	movs	r0, #15
 800086c:	f000 fb42 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.keyCode1 = 0x00;
 8000870:	4b5d      	ldr	r3, [pc, #372]	; (80009e8 <type+0x454>)
 8000872:	2200      	movs	r2, #0
 8000874:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000876:	2208      	movs	r2, #8
 8000878:	495b      	ldr	r1, [pc, #364]	; (80009e8 <type+0x454>)
 800087a:	485c      	ldr	r0, [pc, #368]	; (80009ec <type+0x458>)
 800087c:	f004 ff1a 	bl	80056b4 <USBD_HID_SendReport>
}
 8000880:	e0ad      	b.n	80009de <type+0x44a>
	} else if (c == 0x5F) {
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b5f      	cmp	r3, #95	; 0x5f
 8000886:	d119      	bne.n	80008bc <type+0x328>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 8000888:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <type+0x454>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x2D;
 800088e:	4b56      	ldr	r3, [pc, #344]	; (80009e8 <type+0x454>)
 8000890:	222d      	movs	r2, #45	; 0x2d
 8000892:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000894:	2208      	movs	r2, #8
 8000896:	4954      	ldr	r1, [pc, #336]	; (80009e8 <type+0x454>)
 8000898:	4854      	ldr	r0, [pc, #336]	; (80009ec <type+0x458>)
 800089a:	f004 ff0b 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 fb28 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 80008a4:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <type+0x454>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 80008aa:	4b4f      	ldr	r3, [pc, #316]	; (80009e8 <type+0x454>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80008b0:	2208      	movs	r2, #8
 80008b2:	494d      	ldr	r1, [pc, #308]	; (80009e8 <type+0x454>)
 80008b4:	484d      	ldr	r0, [pc, #308]	; (80009ec <type+0x458>)
 80008b6:	f004 fefd 	bl	80056b4 <USBD_HID_SendReport>
}
 80008ba:	e090      	b.n	80009de <type+0x44a>
	} else if (c == 0x7E) {
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b7e      	cmp	r3, #126	; 0x7e
 80008c0:	d119      	bne.n	80008f6 <type+0x362>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <type+0x454>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x35;
 80008c8:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <type+0x454>)
 80008ca:	2235      	movs	r2, #53	; 0x35
 80008cc:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80008ce:	2208      	movs	r2, #8
 80008d0:	4945      	ldr	r1, [pc, #276]	; (80009e8 <type+0x454>)
 80008d2:	4846      	ldr	r0, [pc, #280]	; (80009ec <type+0x458>)
 80008d4:	f004 feee 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80008d8:	200f      	movs	r0, #15
 80008da:	f000 fb0b 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 80008de:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <type+0x454>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 80008e4:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <type+0x454>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80008ea:	2208      	movs	r2, #8
 80008ec:	493e      	ldr	r1, [pc, #248]	; (80009e8 <type+0x454>)
 80008ee:	483f      	ldr	r0, [pc, #252]	; (80009ec <type+0x458>)
 80008f0:	f004 fee0 	bl	80056b4 <USBD_HID_SendReport>
}
 80008f4:	e073      	b.n	80009de <type+0x44a>
	} else if (c == 0x3C) {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b3c      	cmp	r3, #60	; 0x3c
 80008fa:	d119      	bne.n	8000930 <type+0x39c>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <type+0x454>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x36;
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <type+0x454>)
 8000904:	2236      	movs	r2, #54	; 0x36
 8000906:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000908:	2208      	movs	r2, #8
 800090a:	4937      	ldr	r1, [pc, #220]	; (80009e8 <type+0x454>)
 800090c:	4837      	ldr	r0, [pc, #220]	; (80009ec <type+0x458>)
 800090e:	f004 fed1 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000912:	200f      	movs	r0, #15
 8000914:	f000 faee 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <type+0x454>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <type+0x454>)
 8000920:	2200      	movs	r2, #0
 8000922:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000924:	2208      	movs	r2, #8
 8000926:	4930      	ldr	r1, [pc, #192]	; (80009e8 <type+0x454>)
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <type+0x458>)
 800092a:	f004 fec3 	bl	80056b4 <USBD_HID_SendReport>
}
 800092e:	e056      	b.n	80009de <type+0x44a>
	} else if (c == 0x3E) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b3e      	cmp	r3, #62	; 0x3e
 8000934:	d119      	bne.n	800096a <type+0x3d6>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 8000936:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <type+0x454>)
 8000938:	2202      	movs	r2, #2
 800093a:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x37;
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <type+0x454>)
 800093e:	2237      	movs	r2, #55	; 0x37
 8000940:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000942:	2208      	movs	r2, #8
 8000944:	4928      	ldr	r1, [pc, #160]	; (80009e8 <type+0x454>)
 8000946:	4829      	ldr	r0, [pc, #164]	; (80009ec <type+0x458>)
 8000948:	f004 feb4 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 800094c:	200f      	movs	r0, #15
 800094e:	f000 fad1 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <type+0x454>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <type+0x454>)
 800095a:	2200      	movs	r2, #0
 800095c:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800095e:	2208      	movs	r2, #8
 8000960:	4921      	ldr	r1, [pc, #132]	; (80009e8 <type+0x454>)
 8000962:	4822      	ldr	r0, [pc, #136]	; (80009ec <type+0x458>)
 8000964:	f004 fea6 	bl	80056b4 <USBD_HID_SendReport>
}
 8000968:	e039      	b.n	80009de <type+0x44a>
	} else if (c == 0x2A) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b2a      	cmp	r3, #42	; 0x2a
 800096e:	d119      	bne.n	80009a4 <type+0x410>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <type+0x454>)
 8000972:	2202      	movs	r2, #2
 8000974:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x25;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <type+0x454>)
 8000978:	2225      	movs	r2, #37	; 0x25
 800097a:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800097c:	2208      	movs	r2, #8
 800097e:	491a      	ldr	r1, [pc, #104]	; (80009e8 <type+0x454>)
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <type+0x458>)
 8000982:	f004 fe97 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 8000986:	200f      	movs	r0, #15
 8000988:	f000 fab4 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <type+0x454>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <type+0x454>)
 8000994:	2200      	movs	r2, #0
 8000996:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000998:	2208      	movs	r2, #8
 800099a:	4913      	ldr	r1, [pc, #76]	; (80009e8 <type+0x454>)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <type+0x458>)
 800099e:	f004 fe89 	bl	80056b4 <USBD_HID_SendReport>
}
 80009a2:	e01c      	b.n	80009de <type+0x44a>
	} else if (c == 0x22) {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b22      	cmp	r3, #34	; 0x22
 80009a8:	d119      	bne.n	80009de <type+0x44a>
		HIDKeyboardReport.modifier = 0x02; //SHIFT
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <type+0x454>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x34;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <type+0x454>)
 80009b2:	2234      	movs	r2, #52	; 0x34
 80009b4:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80009b6:	2208      	movs	r2, #8
 80009b8:	490b      	ldr	r1, [pc, #44]	; (80009e8 <type+0x454>)
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <type+0x458>)
 80009bc:	f004 fe7a 	bl	80056b4 <USBD_HID_SendReport>
		HAL_Delay(15);
 80009c0:	200f      	movs	r0, #15
 80009c2:	f000 fa97 	bl	8000ef4 <HAL_Delay>
		HIDKeyboardReport.modifier = 0x00;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <type+0x454>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
		HIDKeyboardReport.keyCode1 = 0x00;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <type+0x454>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80009d2:	2208      	movs	r2, #8
 80009d4:	4904      	ldr	r1, [pc, #16]	; (80009e8 <type+0x454>)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <type+0x458>)
 80009d8:	f004 fe6c 	bl	80056b4 <USBD_HID_SendReport>
}
 80009dc:	e7ff      	b.n	80009de <type+0x44a>
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	200001e8 	.word	0x200001e8

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09a      	sub	sp, #104	; 0x68
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fa0b 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f831 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f8c3 	bl	8000b88 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a02:	f006 f9d1 	bl	8006da8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000a06:	f000 f895 	bl	8000b34 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t c = 0x00;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  HAL_UART_Receive(&huart2, &c, 1, 5000); //Bloqueia até receber um caracter
 8000a10:	f107 0167 	add.w	r1, r7, #103	; 0x67
 8000a14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a18:	2201      	movs	r2, #1
 8000a1a:	480f      	ldr	r0, [pc, #60]	; (8000a58 <main+0x68>)
 8000a1c:	f002 fcc1 	bl	80033a2 <HAL_UART_Receive>
	  if (c) {
 8000a20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f0      	beq.n	8000a0a <main+0x1a>
		  uint8_t buffer[100];
		  snprintf((char *)buffer, 100, "Rx 0x%02X\n", c);
 8000a28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <main+0x6c>)
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	f006 fe19 	bl	8007668 <sniprintf>
		  HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 10);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fbd1 	bl	80001e0 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4639      	mov	r1, r7
 8000a44:	230a      	movs	r3, #10
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <main+0x68>)
 8000a48:	f002 fc19 	bl	800327e <HAL_UART_Transmit>
		  type(c);
 8000a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd9f 	bl	8000594 <type>
  {
 8000a56:	e7d8      	b.n	8000a0a <main+0x1a>
 8000a58:	20000190 	.word	0x20000190
 8000a5c:	08007f84 	.word	0x08007f84

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 fdf2 	bl	8007658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ad8:	2390      	movs	r3, #144	; 0x90
 8000ada:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 ff23 	bl	8002934 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af4:	f000 f870 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 f985 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b20:	f000 f85a 	bl	8000bd8 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	; 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f002 fb3a 	bl	80031e4 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f82f 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000190 	.word	0x20000190
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_GPIO_Init+0x4c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000caa:	f000 fa59 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f8d0 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <OTG_FS_IRQHandler+0x10>)
 8000d1e:	f000 fcf3 	bl	8001708 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200006c4 	.word	0x200006c4

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f006 fc52 	bl	8007604 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20010000 	.word	0x20010000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200001dc 	.word	0x200001dc
 8000d94:	20000bf8 	.word	0x20000bf8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 fc11 	bl	8007610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fdff 	bl	80009f0 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000e00:	08008034 	.word	0x08008034
  ldr r2, =_sbss
 8000e04:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000e08:	20000bf4 	.word	0x20000bf4

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fece 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200001e0 	.word	0x200001e0

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001e0 	.word	0x200001e0

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e159      	b.n	8001430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8148 	bne.w	800142a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d005      	beq.n	80011b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d130      	bne.n	8001214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d017      	beq.n	8001250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a2 	beq.w	800142a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a49      	ldr	r2, [pc, #292]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x202>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1fe>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_GPIO_Init+0x2f8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1fa>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_GPIO_Init+0x2fc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1f6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_GPIO_Init+0x300>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1f2>
 800134e:	2304      	movs	r3, #4
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001352:	2307      	movs	r3, #7
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f aea2 	bls.w	800117c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b08f      	sub	sp, #60	; 0x3c
 800146c:	af0a      	add	r7, sp, #40	; 0x28
 800146e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e10f      	b.n	800169a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f005 fdbd 	bl	8007014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fc0c 	bl	8003cd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	687e      	ldr	r6, [r7, #4]
 80014c6:	466d      	mov	r5, sp
 80014c8:	f106 0410 	add.w	r4, r6, #16
 80014cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014dc:	1d33      	adds	r3, r6, #4
 80014de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f002 fae3 	bl	8003aac <USB_CoreInit>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0d0      	b.n	800169a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fbfa 	bl	8003cf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e04a      	b.n	80015a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	333d      	adds	r3, #61	; 0x3d
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	333c      	adds	r3, #60	; 0x3c
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	b298      	uxth	r0, r3
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3344      	adds	r3, #68	; 0x44
 8001546:	4602      	mov	r2, r0
 8001548:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3340      	adds	r3, #64	; 0x40
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3348      	adds	r3, #72	; 0x48
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	334c      	adds	r3, #76	; 0x4c
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	3354      	adds	r3, #84	; 0x54
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	3301      	adds	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3af      	bcc.n	800150a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e044      	b.n	800163a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3301      	adds	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3b5      	bcc.n	80015b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	687e      	ldr	r6, [r7, #4]
 800164c:	466d      	mov	r5, sp
 800164e:	f106 0410 	add.w	r4, r6, #16
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001662:	1d33      	adds	r3, r6, #4
 8001664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f002 fb92 	bl	8003d90 <USB_DevInit>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00d      	b.n	800169a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fce1 	bl	800505a <USB_DevDisconnect>

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_PCD_Start+0x1c>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e020      	b.n	8001700 <HAL_PCD_Start+0x5e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d109      	bne.n	80016e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fae4 	bl	8003cb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fc91 	bl	8005018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08d      	sub	sp, #52	; 0x34
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fd4f 	bl	80051c2 <USB_GetMode>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 848a 	bne.w	8002040 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fcb3 	bl	800509c <USB_ReadInterrupts>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8480 	beq.w	800203e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fca0 	bl	800509c <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 0202 	and.w	r2, r2, #2
 8001774:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fc8e 	bl	800509c <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b10      	cmp	r3, #16
 8001788:	d161      	bne.n	800184e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699a      	ldr	r2, [r3, #24]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0210 	bic.w	r2, r2, #16
 8001798:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 020f 	and.w	r2, r3, #15
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	0c5b      	lsrs	r3, r3, #17
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d124      	bne.n	8001810 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d035      	beq.n	800183e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	f003 fac5 	bl	8004d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f6:	441a      	add	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001808:	441a      	add	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	e016      	b.n	800183e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	0c5b      	lsrs	r3, r3, #17
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	2b06      	cmp	r3, #6
 800181a:	d110      	bne.n	800183e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001822:	2208      	movs	r2, #8
 8001824:	4619      	mov	r1, r3
 8001826:	6a38      	ldr	r0, [r7, #32]
 8001828:	f003 faa4 	bl	8004d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001838:	441a      	add	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0210 	orr.w	r2, r2, #16
 800184c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fc22 	bl	800509c <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001862:	f040 80a7 	bne.w	80019b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fc27 	bl	80050c2 <USB_ReadDevAllOutEpInterrupt>
 8001874:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001876:	e099      	b.n	80019ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 808e 	beq.w	80019a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fc4b 	bl	800512a <USB_ReadDevOutEPInterrupt>
 8001894:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ac:	461a      	mov	r2, r3
 80018ae:	2301      	movs	r3, #1
 80018b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 feab 	bl	8002610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00c      	beq.n	80018de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d0:	461a      	mov	r2, r3
 80018d2:	2308      	movs	r3, #8
 80018d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 ff81 	bl	80027e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f4:	461a      	mov	r2, r3
 80018f6:	2310      	movs	r3, #16
 80018f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d030      	beq.n	8001966 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d109      	bne.n	8001924 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	78db      	ldrb	r3, [r3, #3]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f005 fc5c 	bl	800720c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001960:	461a      	mov	r2, r3
 8001962:	2302      	movs	r3, #2
 8001964:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197c:	461a      	mov	r2, r3
 800197e:	2320      	movs	r3, #32
 8001980:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001998:	461a      	mov	r2, r3
 800199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f47f af62 	bne.w	8001878 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fb6f 	bl	800509c <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019c8:	f040 80db 	bne.w	8001b82 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fb90 	bl	80050f6 <USB_ReadDevAllInEpInterrupt>
 80019d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019dc:	e0cd      	b.n	8001b7a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80c2 	beq.w	8001b6e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fbb6 	bl	8005166 <USB_ReadDevInEPInterrupt>
 80019fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d057      	beq.n	8001ab6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69f9      	ldr	r1, [r7, #28]
 8001a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a26:	4013      	ands	r3, r2
 8001a28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a36:	461a      	mov	r2, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d132      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	334c      	adds	r3, #76	; 0x4c
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4403      	add	r3, r0
 8001a64:	3348      	adds	r3, #72	; 0x48
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4419      	add	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4403      	add	r3, r0
 8001a78:	334c      	adds	r3, #76	; 0x4c
 8001a7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d113      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x3a2>
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	3354      	adds	r3, #84	; 0x54
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d108      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	f003 fbbd 	bl	8005224 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f005 fb30 	bl	8007116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001acc:	461a      	mov	r2, r3
 8001ace:	2308      	movs	r3, #8
 8001ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2310      	movs	r3, #16
 8001aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b04:	461a      	mov	r2, r3
 8001b06:	2340      	movs	r3, #64	; 0x40
 8001b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b16:	6a38      	ldr	r0, [r7, #32]
 8001b18:	f002 fa9e 	bl	8004058 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	3338      	adds	r3, #56	; 0x38
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	78db      	ldrb	r3, [r3, #3]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f005 fb73 	bl	8007230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b56:	461a      	mov	r2, r3
 8001b58:	2302      	movs	r3, #2
 8001b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fcc3 	bl	80024f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f af2e 	bne.w	80019de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fa88 	bl	800509c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b96:	d122      	bne.n	8001bde <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 feab 	bl	800291c <HAL_PCDEx_LPM_Callback>
 8001bc6:	e002      	b.n	8001bce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 fb11 	bl	80071f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fa5a 	bl	800509c <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf2:	d112      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 facd 	bl	80071a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c18:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fa3c 	bl	800509c <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2e:	f040 80b7 	bne.w	8001da0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fa03 	bl	8004058 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c56:	e046      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c64:	461a      	mov	r2, r3
 8001c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7c:	0151      	lsls	r1, r2, #5
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	440a      	add	r2, r1
 8001c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb0:	0151      	lsls	r1, r2, #5
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	440a      	add	r2, r1
 8001cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd0:	0151      	lsls	r1, r2, #5
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3b3      	bcc.n	8001c58 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d016      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d1c:	f043 030b 	orr.w	r3, r3, #11
 8001d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d32:	f043 030b 	orr.w	r3, r3, #11
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	e015      	b.n	8001d66 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d60:	f043 030b 	orr.w	r3, r3, #11
 8001d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f003 fa4a 	bl	8005224 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 f979 	bl	800509c <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d124      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fa0f 	bl	80051de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 f9c4 	bl	8004152 <USB_GetDevSpeed>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	f001 f9d1 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8001dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	4620      	mov	r0, r4
 8001de6:	f001 fec3 	bl	8003b70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f005 f9bb 	bl	8007166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 f949 	bl	800509c <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d10a      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f005 f998 	bl	800714a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f002 0208 	and.w	r2, r2, #8
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f934 	bl	800509c <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d122      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	e014      	b.n	8001e7a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb0f 	bl	8002492 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3301      	adds	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3e5      	bcc.n	8001e50 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f907 	bl	800509c <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e98:	d13b      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e02b      	b.n	8001ef8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3340      	adds	r3, #64	; 0x40
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d115      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da12      	bge.n	8001ef2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	333f      	adds	r3, #63	; 0x3f
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fad0 	bl	8002492 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3ce      	bcc.n	8001ea0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f8c0 	bl	800509c <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f26:	d155      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f28:	2301      	movs	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	e045      	b.n	8001fba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d12e      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da2b      	bge.n	8001fb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d121      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb0:	6053      	str	r3, [r2, #4]
            break;
 8001fb2:	e007      	b.n	8001fc4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3b4      	bcc.n	8001f2e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 f85f 	bl	800509c <USB_ReadInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d10a      	bne.n	8002000 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f005 f932 	bl	8007254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 f849 	bl	800509c <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d115      	bne.n	8002040 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f005 f922 	bl	8007270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e000      	b.n	8002040 <HAL_PCD_IRQHandler+0x938>
      return;
 800203e:	bf00      	nop
    }
  }
}
 8002040:	3734      	adds	r7, #52	; 0x34
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}

08002046 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_PCD_SetAddress+0x1a>
 800205c:	2302      	movs	r3, #2
 800205e:	e013      	b.n	8002088 <HAL_PCD_SetAddress+0x42>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f002 ffa7 	bl	8004fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	70fb      	strb	r3, [r7, #3]
 80020a2:	460b      	mov	r3, r1
 80020a4:	803b      	strh	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da0f      	bge.n	80020d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	705a      	strb	r2, [r3, #1]
 80020d4:	e00f      	b.n	80020f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002102:	883a      	ldrh	r2, [r7, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	78ba      	ldrb	r2, [r7, #2]
 800210c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002120:	78bb      	ldrb	r3, [r7, #2]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d102      	bne.n	800212c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_EP_Open+0xaa>
 8002136:	2302      	movs	r3, #2
 8002138:	e00e      	b.n	8002158 <HAL_PCD_EP_Open+0xc8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 f827 	bl	800419c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002156:	7afb      	ldrb	r3, [r7, #11]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800216c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002170:	2b00      	cmp	r3, #0
 8002172:	da0f      	bge.n	8002194 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 020f 	and.w	r2, r3, #15
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	3338      	adds	r3, #56	; 0x38
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	705a      	strb	r2, [r3, #1]
 8002192:	e00f      	b.n	80021b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_PCD_EP_Close+0x6e>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e00e      	b.n	80021ec <HAL_PCD_EP_Close+0x8c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 f865 	bl	80042ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002204:	7afb      	ldrb	r3, [r7, #11]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	b2da      	uxtb	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d102      	bne.n	8002250 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	6979      	ldr	r1, [r7, #20]
 8002268:	f002 fb44 	bl	80048f4 <USB_EP0StartXfer>
 800226c:	e008      	b.n	8002280 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	6979      	ldr	r1, [r7, #20]
 800227c:	f002 f8f2 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	460b      	mov	r3, r1
 8002298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	3338      	adds	r3, #56	; 0x38
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	f002 fafa 	bl	80048f4 <USB_EP0StartXfer>
 8002300:	e008      	b.n	8002314 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6979      	ldr	r1, [r7, #20]
 8002310:	f002 f8a8 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 020f 	and.w	r2, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d901      	bls.n	800233c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e050      	b.n	80023de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800233c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da0f      	bge.n	8002364 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 020f 	and.w	r2, r3, #15
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3338      	adds	r3, #56	; 0x38
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
 8002362:	e00d      	b.n	8002380 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_SetStall+0x82>
 800239c:	2302      	movs	r3, #2
 800239e:	e01e      	b.n	80023de <HAL_PCD_EP_SetStall+0xc0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fd38 	bl	8004e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	b2d9      	uxtb	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023ce:	461a      	mov	r2, r3
 80023d0:	f002 ff28 	bl	8005224 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d901      	bls.n	8002404 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e042      	b.n	800248a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0f      	bge.n	800242c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3338      	adds	r3, #56	; 0x38
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	705a      	strb	r2, [r3, #1]
 800242a:	e00f      	b.n	800244c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_PCD_EP_ClrStall+0x86>
 8002468:	2302      	movs	r3, #2
 800246a:	e00e      	b.n	800248a <HAL_PCD_EP_ClrStall+0xa4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fd40 	bl	8004f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800249e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da0c      	bge.n	80024c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e00c      	b.n	80024da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 020f 	and.w	r2, r3, #15
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fb5f 	bl	8004ba4 <USB_EPStopXfer>
 80024e6:	4603      	mov	r3, r0
 80024e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024ea:	7afb      	ldrb	r3, [r7, #11]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	3338      	adds	r3, #56	; 0x38
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	429a      	cmp	r2, r3
 8002526:	d901      	bls.n	800252c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e06c      	b.n	8002606 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	429a      	cmp	r2, r3
 8002540:	d902      	bls.n	8002548 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3303      	adds	r3, #3
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002550:	e02b      	b.n	80025aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	429a      	cmp	r2, r3
 8002566:	d902      	bls.n	800256e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3303      	adds	r3, #3
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002586:	b2db      	uxtb	r3, r3
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f002 fbb3 	bl	8004cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d809      	bhi.n	80025d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d203      	bcs.n	80025d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1be      	bne.n	8002552 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d811      	bhi.n	8002604 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	2201      	movs	r2, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002600:	4013      	ands	r3, r2
 8002602:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	333c      	adds	r3, #60	; 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d17b      	bne.n	800273e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4a61      	ldr	r2, [pc, #388]	; (80027d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f240 80b9 	bls.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80b3 	beq.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e0a7      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002692:	461a      	mov	r2, r3
 8002694:	2320      	movs	r3, #32
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	e098      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 8093 	bne.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d90f      	bls.n	80026ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e07e      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	0159      	lsls	r1, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d114      	bne.n	8002730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002718:	461a      	mov	r2, r3
 800271a:	2101      	movs	r1, #1
 800271c:	f002 fd82 	bl	8005224 <USB_EP0_OutStart>
 8002720:	e006      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	441a      	add	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f004 fcd2 	bl	80070e0 <HAL_PCD_DataOutStageCallback>
 800273c:	e046      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	4a26      	ldr	r2, [pc, #152]	; (80027dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d124      	bne.n	8002790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	e032      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277c:	461a      	mov	r2, r3
 800277e:	2320      	movs	r3, #32
 8002780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f004 fca9 	bl	80070e0 <HAL_PCD_DataOutStageCallback>
 800278e:	e01d      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	f002 fd32 	bl	8005224 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f004 fc8a 	bl	80070e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	4f54300a 	.word	0x4f54300a
 80027dc:	4f54310a 	.word	0x4f54310a

080027e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	333c      	adds	r3, #60	; 0x3c
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <PCD_EP_OutSetupPacket_int+0x88>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d90e      	bls.n	8002834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f004 fc41 	bl	80070bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <PCD_EP_OutSetupPacket_int+0x88>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d90c      	bls.n	800285c <PCD_EP_OutSetupPacket_int+0x7c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002854:	461a      	mov	r2, r3
 8002856:	2101      	movs	r1, #1
 8002858:	f002 fce4 	bl	8005224 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	4f54300a 	.word	0x4f54300a

0800286c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
 8002878:	4613      	mov	r3, r2
 800287a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800288a:	883b      	ldrh	r3, [r7, #0]
 800288c:	0419      	lsls	r1, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	430a      	orrs	r2, r1
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
 8002898:	e028      	b.n	80028ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e00d      	b.n	80028ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3340      	adds	r3, #64	; 0x40
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3ec      	bcc.n	80028ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	0418      	lsls	r0, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	3b01      	subs	r3, #1
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4302      	orrs	r2, r0
 80028e4:	3340      	adds	r3, #64	; 0x40
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e267      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e242      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6f      	ldr	r2, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6c      	ldr	r2, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa76 	bl	8000edc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fa72 	bl	8000edc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e207      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa62 	bl	8000edc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa5e 	bl	8000edc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1f3      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c7      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fa17 	bl	8000edc <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fa13 	bl	8000edc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a8      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f9f6 	bl	8000edc <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe f9f2 	bl	8000edc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e187      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f9d6 	bl	8000edc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe f9d2 	bl	8000edc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e167      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f9bf 	bl	8000edc <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f9bb 	bl	8000edc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e150      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a73      	ldr	r2, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe f97b 	bl	8000edc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe f977 	bl	8000edc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e10c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2ea>
 8002c10:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a63      	ldr	r2, [pc, #396]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x30c>
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f93c 	bl	8000edc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f938 	bl	8000edc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0cb      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f926 	bl	8000edc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe f922 	bl	8000edc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0b5      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a1 	beq.w	8002e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d05c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d141      	bne.n	8002d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f8f6 	bl	8000edc <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f8f2 	bl	8000edc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e087      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	491b      	ldr	r1, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe f8cb 	bl	8000edc <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe f8c7 	bl	8000edc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e05c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x416>
 8002d68:	e054      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe f8b4 	bl	8000edc <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f8b0 	bl	8000edc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e045      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x444>
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e038      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d121      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d111      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cc      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90c      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e067      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4934      	ldr	r1, [pc, #208]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fd ffe2 	bl	8000edc <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fd ffde 	bl	8000edc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e04f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20c      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd ff42 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08007fd8 	.word	0x08007fd8
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20000004 	.word	0x20000004

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b090      	sub	sp, #64	; 0x40
 8002ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d00d      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x40>
 8003014:	2b08      	cmp	r3, #8
 8003016:	f200 80a1 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x16c>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x3a>
 8003022:	e09b      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003028:	e09b      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302e:	e098      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	2200      	movs	r2, #0
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	627a      	str	r2, [r7, #36]	; 0x24
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003058:	2100      	movs	r1, #0
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800305c:	fb03 f201 	mul.w	r2, r3, r1
 8003060:	2300      	movs	r3, #0
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	4413      	add	r3, r2
 8003068:	4a43      	ldr	r2, [pc, #268]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800306a:	fba0 1202 	umull	r1, r2, r0, r2
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	460a      	mov	r2, r1
 8003072:	62ba      	str	r2, [r7, #40]	; 0x28
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	4413      	add	r3, r2
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	2200      	movs	r2, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	61fa      	str	r2, [r7, #28]
 8003082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800308a:	f7fd f901 	bl	8000290 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003096:	e053      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	617a      	str	r2, [r7, #20]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030aa:	f04f 0b00 	mov.w	fp, #0
 80030ae:	4652      	mov	r2, sl
 80030b0:	465b      	mov	r3, fp
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ca:	eb63 090b 	sbc.w	r9, r3, fp
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e2:	ebb2 0408 	subs.w	r4, r2, r8
 80030e6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	00eb      	lsls	r3, r5, #3
 80030f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	4614      	mov	r4, r2
 80030fc:	461d      	mov	r5, r3
 80030fe:	eb14 030a 	adds.w	r3, r4, sl
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	eb45 030b 	adc.w	r3, r5, fp
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003116:	4629      	mov	r1, r5
 8003118:	028b      	lsls	r3, r1, #10
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003120:	4621      	mov	r1, r4
 8003122:	028a      	lsls	r2, r1, #10
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	2200      	movs	r2, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003134:	f7fd f8ac 	bl	8000290 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003164:	4618      	mov	r0, r3
 8003166:	3740      	adds	r7, #64	; 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff0 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08007fe8 	.word	0x08007fe8

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c0:	f7ff ffdc 	bl	800317c <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0b5b      	lsrs	r3, r3, #13
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08007fe8 	.word	0x08007fe8

080031e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e03f      	b.n	8003276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd12 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f9cb 	bl	80035c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08a      	sub	sp, #40	; 0x28
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d17c      	bne.n	8003398 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_Transmit+0x2c>
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e075      	b.n	800339a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Transmit+0x3e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e06e      	b.n	800339a <HAL_UART_Transmit+0x11c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	; 0x21
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe03 	bl	8000edc <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d108      	bne.n	8003300 <HAL_UART_Transmit+0x82>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e003      	b.n	8003308 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003310:	e02a      	b.n	8003368 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f8e2 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e036      	b.n	800339a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3302      	adds	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e007      	b.n	800335a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cf      	bne.n	8003312 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f8b2 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e006      	b.n	800339a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	; 0x28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f040 808c 	bne.w	80034dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Receive+0x2e>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e084      	b.n	80034de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Receive+0x40>
 80033de:	2302      	movs	r3, #2
 80033e0:	e07d      	b.n	80034de <HAL_UART_Receive+0x13c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2222      	movs	r2, #34	; 0x22
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fd fd6d 	bl	8000edc <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d108      	bne.n	800342c <HAL_UART_Receive+0x8a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e003      	b.n	8003434 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800343c:	e043      	b.n	80034c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2120      	movs	r1, #32
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f84c 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e042      	b.n	80034de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	b29a      	uxth	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	3302      	adds	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e01f      	b.n	80034b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d007      	beq.n	8003492 <HAL_UART_Receive+0xf0>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_UART_Receive+0xfe>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e008      	b.n	80034b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1b6      	bne.n	800343e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b090      	sub	sp, #64	; 0x40
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	e050      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fe:	d04c      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x30>
 8003506:	f7fd fce9 	bl	8000edc <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003512:	429a      	cmp	r2, r3
 8003514:	d241      	bcs.n	800359a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003536:	637a      	str	r2, [r7, #52]	; 0x34
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800353c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	613b      	str	r3, [r7, #16]
   return(result);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3314      	adds	r3, #20
 8003568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356a:	623a      	str	r2, [r7, #32]
 800356c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	69f9      	ldr	r1, [r7, #28]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	61bb      	str	r3, [r7, #24]
   return(result);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00f      	b.n	80035ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d09f      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3740      	adds	r7, #64	; 0x40
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c8:	b0c0      	sub	sp, #256	; 0x100
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	68d9      	ldr	r1, [r3, #12]
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	ea40 0301 	orr.w	r3, r0, r1
 80035ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800361c:	f021 010c 	bic.w	r1, r1, #12
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800362a:	430b      	orrs	r3, r1
 800362c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	6999      	ldr	r1, [r3, #24]
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	ea40 0301 	orr.w	r3, r0, r1
 800364a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <UART_SetConfig+0x2cc>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0xa0>
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b8d      	ldr	r3, [pc, #564]	; (8003894 <UART_SetConfig+0x2d0>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d104      	bne.n	800366e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7ff fdaa 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8003668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800366c:	e003      	b.n	8003676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7ff fd91 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8003672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	f040 810c 	bne.w	800389c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800368e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	1891      	adds	r1, r2, r2
 800369c:	65b9      	str	r1, [r7, #88]	; 0x58
 800369e:	415b      	adcs	r3, r3
 80036a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036a6:	4621      	mov	r1, r4
 80036a8:	eb12 0801 	adds.w	r8, r2, r1
 80036ac:	4629      	mov	r1, r5
 80036ae:	eb43 0901 	adc.w	r9, r3, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	eb18 0303 	adds.w	r3, r8, r3
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036d4:	462b      	mov	r3, r5
 80036d6:	eb49 0303 	adc.w	r3, r9, r3
 80036da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036f2:	460b      	mov	r3, r1
 80036f4:	18db      	adds	r3, r3, r3
 80036f6:	653b      	str	r3, [r7, #80]	; 0x50
 80036f8:	4613      	mov	r3, r2
 80036fa:	eb42 0303 	adc.w	r3, r2, r3
 80036fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003708:	f7fc fdc2 	bl	8000290 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <UART_SetConfig+0x2d4>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011c      	lsls	r4, r3, #4
 800371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	64b9      	str	r1, [r7, #72]	; 0x48
 8003734:	415b      	adcs	r3, r3
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800373c:	4641      	mov	r1, r8
 800373e:	eb12 0a01 	adds.w	sl, r2, r1
 8003742:	4649      	mov	r1, r9
 8003744:	eb43 0b01 	adc.w	fp, r3, r1
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	4692      	mov	sl, r2
 800375e:	469b      	mov	fp, r3
 8003760:	4643      	mov	r3, r8
 8003762:	eb1a 0303 	adds.w	r3, sl, r3
 8003766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800376a:	464b      	mov	r3, r9
 800376c:	eb4b 0303 	adc.w	r3, fp, r3
 8003770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003788:	460b      	mov	r3, r1
 800378a:	18db      	adds	r3, r3, r3
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
 800378e:	4613      	mov	r3, r2
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
 8003796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800379a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800379e:	f7fc fd77 	bl	8000290 <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <UART_SetConfig+0x2d4>)
 80037aa:	fba3 2301 	umull	r2, r3, r3, r1
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2264      	movs	r2, #100	; 0x64
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	1acb      	subs	r3, r1, r3
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <UART_SetConfig+0x2d4>)
 80037c0:	fba3 2302 	umull	r2, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037cc:	441c      	add	r4, r3
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e8:	415b      	adcs	r3, r3
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037f0:	4641      	mov	r1, r8
 80037f2:	1851      	adds	r1, r2, r1
 80037f4:	6339      	str	r1, [r7, #48]	; 0x30
 80037f6:	4649      	mov	r1, r9
 80037f8:	414b      	adcs	r3, r1
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003808:	4659      	mov	r1, fp
 800380a:	00cb      	lsls	r3, r1, #3
 800380c:	4651      	mov	r1, sl
 800380e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003812:	4651      	mov	r1, sl
 8003814:	00ca      	lsls	r2, r1, #3
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	4603      	mov	r3, r0
 800381c:	4642      	mov	r2, r8
 800381e:	189b      	adds	r3, r3, r2
 8003820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003824:	464b      	mov	r3, r9
 8003826:	460a      	mov	r2, r1
 8003828:	eb42 0303 	adc.w	r3, r2, r3
 800382c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800383c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003844:	460b      	mov	r3, r1
 8003846:	18db      	adds	r3, r3, r3
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
 800384a:	4613      	mov	r3, r2
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800385a:	f7fc fd19 	bl	8000290 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <UART_SetConfig+0x2d4>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2164      	movs	r1, #100	; 0x64
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <UART_SetConfig+0x2d4>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4422      	add	r2, r4
 800388a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800388c:	e105      	b.n	8003a9a <UART_SetConfig+0x4d6>
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800389c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ae:	4642      	mov	r2, r8
 80038b0:	464b      	mov	r3, r9
 80038b2:	1891      	adds	r1, r2, r2
 80038b4:	6239      	str	r1, [r7, #32]
 80038b6:	415b      	adcs	r3, r3
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038be:	4641      	mov	r1, r8
 80038c0:	1854      	adds	r4, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb43 0501 	adc.w	r5, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	00eb      	lsls	r3, r5, #3
 80038d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d6:	00e2      	lsls	r2, r4, #3
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	4643      	mov	r3, r8
 80038de:	18e3      	adds	r3, r4, r3
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e4:	464b      	mov	r3, r9
 80038e6:	eb45 0303 	adc.w	r3, r5, r3
 80038ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800390a:	4629      	mov	r1, r5
 800390c:	008b      	lsls	r3, r1, #2
 800390e:	4621      	mov	r1, r4
 8003910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003914:	4621      	mov	r1, r4
 8003916:	008a      	lsls	r2, r1, #2
 8003918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800391c:	f7fc fcb8 	bl	8000290 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b60      	ldr	r3, [pc, #384]	; (8003aa8 <UART_SetConfig+0x4e4>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800393c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	61b9      	str	r1, [r7, #24]
 8003948:	415b      	adcs	r3, r3
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	4641      	mov	r1, r8
 8003952:	1851      	adds	r1, r2, r1
 8003954:	6139      	str	r1, [r7, #16]
 8003956:	4649      	mov	r1, r9
 8003958:	414b      	adcs	r3, r1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003968:	4659      	mov	r1, fp
 800396a:	00cb      	lsls	r3, r1, #3
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003972:	4651      	mov	r1, sl
 8003974:	00ca      	lsls	r2, r1, #3
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	4603      	mov	r3, r0
 800397c:	4642      	mov	r2, r8
 800397e:	189b      	adds	r3, r3, r2
 8003980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003984:	464b      	mov	r3, r9
 8003986:	460a      	mov	r2, r1
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	67bb      	str	r3, [r7, #120]	; 0x78
 800399a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039a8:	4649      	mov	r1, r9
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	4641      	mov	r1, r8
 80039ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b2:	4641      	mov	r1, r8
 80039b4:	008a      	lsls	r2, r1, #2
 80039b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039ba:	f7fc fc69 	bl	8000290 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <UART_SetConfig+0x4e4>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	; 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	3332      	adds	r3, #50	; 0x32
 80039d6:	4a34      	ldr	r2, [pc, #208]	; (8003aa8 <UART_SetConfig+0x4e4>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e2:	441c      	add	r4, r3
 80039e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e8:	2200      	movs	r2, #0
 80039ea:	673b      	str	r3, [r7, #112]	; 0x70
 80039ec:	677a      	str	r2, [r7, #116]	; 0x74
 80039ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039f2:	4642      	mov	r2, r8
 80039f4:	464b      	mov	r3, r9
 80039f6:	1891      	adds	r1, r2, r2
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	415b      	adcs	r3, r3
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a02:	4641      	mov	r1, r8
 8003a04:	1851      	adds	r1, r2, r1
 8003a06:	6039      	str	r1, [r7, #0]
 8003a08:	4649      	mov	r1, r9
 8003a0a:	414b      	adcs	r3, r1
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	00cb      	lsls	r3, r1, #3
 8003a1e:	4651      	mov	r1, sl
 8003a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a24:	4651      	mov	r1, sl
 8003a26:	00ca      	lsls	r2, r1, #3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4642      	mov	r2, r8
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a34:	464b      	mov	r3, r9
 8003a36:	460a      	mov	r2, r1
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	663b      	str	r3, [r7, #96]	; 0x60
 8003a48:	667a      	str	r2, [r7, #100]	; 0x64
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a56:	4649      	mov	r1, r9
 8003a58:	008b      	lsls	r3, r1, #2
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a60:	4641      	mov	r1, r8
 8003a62:	008a      	lsls	r2, r1, #2
 8003a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a68:	f7fc fc12 	bl	8000290 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <UART_SetConfig+0x4e4>)
 8003a72:	fba3 1302 	umull	r1, r3, r3, r2
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2164      	movs	r1, #100	; 0x64
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	3332      	adds	r3, #50	; 0x32
 8003a84:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <UART_SetConfig+0x4e4>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4422      	add	r2, r4
 8003a98:	609a      	str	r2, [r3, #8]
}
 8003a9a:	bf00      	nop
 8003a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	51eb851f 	.word	0x51eb851f

08003aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	f107 001c 	add.w	r0, r7, #28
 8003aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d122      	bne.n	8003b0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fbee 	bl	80052e0 <USB_CoreReset>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e01a      	b.n	8003b40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fbe2 	bl	80052e0 <USB_CoreReset>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
 8003b32:	e005      	b.n	8003b40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10b      	bne.n	8003b5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f043 0206 	orr.w	r2, r3, #6
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6a:	b004      	add	sp, #16
 8003b6c:	4770      	bx	lr
	...

08003b70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d165      	bne.n	8003c50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a41      	ldr	r2, [pc, #260]	; (8003c8c <USB_SetTurnaroundTime+0x11c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d906      	bls.n	8003b9a <USB_SetTurnaroundTime+0x2a>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a40      	ldr	r2, [pc, #256]	; (8003c90 <USB_SetTurnaroundTime+0x120>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d202      	bcs.n	8003b9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b94:	230f      	movs	r3, #15
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e062      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <USB_SetTurnaroundTime+0x120>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d306      	bcc.n	8003bb0 <USB_SetTurnaroundTime+0x40>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a3b      	ldr	r2, [pc, #236]	; (8003c94 <USB_SetTurnaroundTime+0x124>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d202      	bcs.n	8003bb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003baa:	230e      	movs	r3, #14
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e057      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <USB_SetTurnaroundTime+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d306      	bcc.n	8003bc6 <USB_SetTurnaroundTime+0x56>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <USB_SetTurnaroundTime+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d202      	bcs.n	8003bc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bc0:	230d      	movs	r3, #13
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e04c      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a33      	ldr	r2, [pc, #204]	; (8003c98 <USB_SetTurnaroundTime+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d306      	bcc.n	8003bdc <USB_SetTurnaroundTime+0x6c>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <USB_SetTurnaroundTime+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e041      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <USB_SetTurnaroundTime+0x12c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d906      	bls.n	8003bf2 <USB_SetTurnaroundTime+0x82>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <USB_SetTurnaroundTime+0x130>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d802      	bhi.n	8003bf2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bec:	230b      	movs	r3, #11
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e036      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <USB_SetTurnaroundTime+0x130>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d906      	bls.n	8003c08 <USB_SetTurnaroundTime+0x98>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <USB_SetTurnaroundTime+0x134>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d802      	bhi.n	8003c08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c02:	230a      	movs	r3, #10
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e02b      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <USB_SetTurnaroundTime+0x134>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d906      	bls.n	8003c1e <USB_SetTurnaroundTime+0xae>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <USB_SetTurnaroundTime+0x138>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d202      	bcs.n	8003c1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c18:	2309      	movs	r3, #9
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e020      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <USB_SetTurnaroundTime+0x138>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d306      	bcc.n	8003c34 <USB_SetTurnaroundTime+0xc4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <USB_SetTurnaroundTime+0x13c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d802      	bhi.n	8003c34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e015      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <USB_SetTurnaroundTime+0x13c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d906      	bls.n	8003c4a <USB_SetTurnaroundTime+0xda>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <USB_SetTurnaroundTime+0x140>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d202      	bcs.n	8003c4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c44:	2307      	movs	r3, #7
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e00a      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e007      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c56:	2309      	movs	r3, #9
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e001      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c5c:	2309      	movs	r3, #9
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	00d8acbf 	.word	0x00d8acbf
 8003c90:	00e4e1c0 	.word	0x00e4e1c0
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	01067380 	.word	0x01067380
 8003c9c:	011a499f 	.word	0x011a499f
 8003ca0:	01312cff 	.word	0x01312cff
 8003ca4:	014ca43f 	.word	0x014ca43f
 8003ca8:	016e3600 	.word	0x016e3600
 8003cac:	01a6ab1f 	.word	0x01a6ab1f
 8003cb0:	01e84800 	.word	0x01e84800

08003cb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d115      	bne.n	8003d46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fd f8e4 	bl	8000ef4 <HAL_Delay>
      ms++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f001 fa45 	bl	80051c2 <USB_GetMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d01e      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b31      	cmp	r3, #49	; 0x31
 8003d42:	d9f0      	bls.n	8003d26 <USB_SetCurrentMode+0x2e>
 8003d44:	e01a      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d115      	bne.n	8003d78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fd f8cb 	bl	8000ef4 <HAL_Delay>
      ms++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 fa2c 	bl	80051c2 <USB_GetMode>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b31      	cmp	r3, #49	; 0x31
 8003d74:	d9f0      	bls.n	8003d58 <USB_SetCurrentMode+0x60>
 8003d76:	e001      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e005      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b32      	cmp	r3, #50	; 0x32
 8003d80:	d101      	bne.n	8003d86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d90:	b084      	sub	sp, #16
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e009      	b.n	8003dc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3340      	adds	r3, #64	; 0x40
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0e      	cmp	r3, #14
 8003dc8:	d9f2      	bls.n	8003db0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11c      	bne.n	8003e0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
 8003e08:	e00b      	b.n	8003e22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	4619      	mov	r1, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	680b      	ldr	r3, [r1, #0]
 8003e40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10c      	bne.n	8003e62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f965 	bl	8004120 <USB_SetDevSpeed>
 8003e56:	e008      	b.n	8003e6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f960 	bl	8004120 <USB_SetDevSpeed>
 8003e60:	e003      	b.n	8003e6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e62:	2103      	movs	r1, #3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f95b 	bl	8004120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8f3 	bl	8004058 <USB_FlushTxFifo>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f91f 	bl	80040c0 <USB_FlushRxFifo>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e043      	b.n	8003f3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ecc:	d118      	bne.n	8003f00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e013      	b.n	8003f12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e008      	b.n	8003f12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2300      	movs	r3, #0
 8003f22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3b7      	bcc.n	8003eb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e043      	b.n	8003fd4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f62:	d118      	bne.n	8003f96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e013      	b.n	8003fa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e008      	b.n	8003fa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3b7      	bcc.n	8003f4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <USB_DevInit+0x2c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800401c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 0208 	orr.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr
 8004054:	803c3800 	.word	0x803c3800

08004058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <USB_FlushTxFifo+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e01b      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	daf2      	bge.n	8004066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	019b      	lsls	r3, r3, #6
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a08      	ldr	r2, [pc, #32]	; (80040bc <USB_FlushTxFifo+0x64>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e006      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d0f0      	beq.n	8004090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e018      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	daf2      	bge.n	80040cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2210      	movs	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a08      	ldr	r2, [pc, #32]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d0f0      	beq.n	80040f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	00030d40 	.word	0x00030d40

08004120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b087      	sub	sp, #28
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
 8004176:	e00a      	b.n	800418e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d002      	beq.n	8004184 <USB_GetDevSpeed+0x32>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d102      	bne.n	800418a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004184:	2302      	movs	r3, #2
 8004186:	75fb      	strb	r3, [r7, #23]
 8004188:	e001      	b.n	800418e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800418a:	230f      	movs	r3, #15
 800418c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d13a      	bne.n	800422e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d155      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800420c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	059b      	lsls	r3, r3, #22
 8004212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004214:	4313      	orrs	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e036      	b.n	800429c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11a      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004282:	430b      	orrs	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d161      	bne.n	800438c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042de:	d11f      	bne.n	8004320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800431e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4013      	ands	r3, r2
 8004342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004364:	4013      	ands	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0159      	lsls	r1, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	440b      	add	r3, r1
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	4619      	mov	r1, r3
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <USB_DeactivateEndpoint+0x1b0>)
 8004386:	4013      	ands	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
 800438a:	e060      	b.n	800444e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a2:	d11f      	bne.n	80043e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	43db      	mvns	r3, r3
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004404:	4013      	ands	r3, r2
 8004406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	43db      	mvns	r3, r3
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004428:	4013      	ands	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	0159      	lsls	r1, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	440b      	add	r3, r1
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	4619      	mov	r1, r3
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <USB_DeactivateEndpoint+0x1b4>)
 800444a:	4013      	ands	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	ec337800 	.word	0xec337800
 8004460:	eff37800 	.word	0xeff37800

08004464 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b01      	cmp	r3, #1
 8004482:	f040 815c 	bne.w	800473e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d132      	bne.n	80044f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	0151      	lsls	r1, r2, #5
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	440a      	add	r2, r1
 80044c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ec:	0cdb      	lsrs	r3, r3, #19
 80044ee:	04db      	lsls	r3, r3, #19
 80044f0:	6113      	str	r3, [r2, #16]
 80044f2:	e074      	b.n	80045de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450e:	0cdb      	lsrs	r3, r3, #19
 8004510:	04db      	lsls	r3, r3, #19
 8004512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004532:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	440b      	add	r3, r1
 8004550:	1e59      	subs	r1, r3, #1
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	fbb1 f3f3 	udiv	r3, r1, r3
 800455a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800455c:	4b9d      	ldr	r3, [pc, #628]	; (80047d4 <USB_EPStartXfer+0x370>)
 800455e:	400b      	ands	r3, r1
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	0148      	lsls	r0, r1, #5
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	4401      	add	r1, r0
 8004568:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	0148      	lsls	r0, r1, #5
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	4401      	add	r1, r0
 800458e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	791b      	ldrb	r3, [r3, #4]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d11f      	bne.n	80045de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d14b      	bne.n	800467c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	791b      	ldrb	r3, [r3, #4]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d128      	bne.n	800465a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d110      	bne.n	800463a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e00f      	b.n	800465a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e133      	b.n	80048e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	791b      	ldrb	r3, [r3, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d015      	beq.n	80046d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 811b 	beq.w	80048e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ca:	4313      	orrs	r3, r2
 80046cc:	634b      	str	r3, [r1, #52]	; 0x34
 80046ce:	e109      	b.n	80048e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e00f      	b.n	8004722 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	b298      	uxth	r0, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4603      	mov	r3, r0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fade 	bl	8004cf8 <USB_WritePacket>
 800473c:	e0d2      	b.n	80048e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004758:	0cdb      	lsrs	r3, r3, #19
 800475a:	04db      	lsls	r3, r3, #19
 800475c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800477c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d126      	bne.n	80047d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	0148      	lsls	r0, r1, #5
 80047a4:	69f9      	ldr	r1, [r7, #28]
 80047a6:	4401      	add	r1, r0
 80047a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047ac:	4313      	orrs	r3, r2
 80047ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ce:	6113      	str	r3, [r2, #16]
 80047d0:	e03a      	b.n	8004848 <USB_EPStartXfer+0x3e4>
 80047d2:	bf00      	nop
 80047d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	8afa      	ldrh	r2, [r7, #22]
 80047f4:	fb03 f202 	mul.w	r2, r3, r2
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	8afb      	ldrh	r3, [r7, #22]
 800480c:	04d9      	lsls	r1, r3, #19
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <USB_EPStartXfer+0x48c>)
 8004810:	400b      	ands	r3, r1
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	0148      	lsls	r0, r1, #5
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	4401      	add	r1, r0
 800481a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800481e:	4313      	orrs	r3, r2
 8004820:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	0148      	lsls	r0, r1, #5
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	4401      	add	r1, r0
 8004840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	460a      	mov	r2, r1
 8004868:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d128      	bne.n	80048c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d110      	bne.n	80048a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00f      	b.n	80048c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	1ff80000 	.word	0x1ff80000

080048f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b01      	cmp	r3, #1
 8004912:	f040 80ce 	bne.w	8004ab2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d132      	bne.n	8004984 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800493c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	0cdb      	lsrs	r3, r3, #19
 800497e:	04db      	lsls	r3, r3, #19
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	e04e      	b.n	8004a22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499e:	0cdb      	lsrs	r3, r3, #19
 80049a0:	04db      	lsls	r3, r3, #19
 80049a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	6939      	ldr	r1, [r7, #16]
 8004a14:	0148      	lsls	r0, r1, #5
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	4401      	add	r1, r0
 8004a1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d11e      	bne.n	8004a66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e097      	b.n	8004b96 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8083 	beq.w	8004b96 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aac:	4313      	orrs	r3, r2
 8004aae:	634b      	str	r3, [r1, #52]	; 0x34
 8004ab0:	e071      	b.n	8004b96 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004acc:	0cdb      	lsrs	r3, r3, #19
 8004ace:	04db      	lsls	r3, r3, #19
 8004ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b44:	6939      	ldr	r1, [r7, #16]
 8004b46:	0148      	lsls	r0, r1, #5
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10d      	bne.n	8004b76 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	460a      	mov	r2, r1
 8004b74:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d14a      	bne.n	8004c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bda:	f040 8086 	bne.w	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d902      	bls.n	8004c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
          break;
 8004c3a:	e056      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c54:	d0e7      	beq.n	8004c26 <USB_EPStopXfer+0x82>
 8004c56:	e048      	b.n	8004cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c70:	d13b      	bne.n	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d902      	bls.n	8004cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cce:	e00c      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce8:	d0e7      	beq.n	8004cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	460b      	mov	r3, r1
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d123      	bne.n	8004d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	3303      	adds	r3, #3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e018      	b.n	8004d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	031a      	lsls	r2, r3, #12
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	461a      	mov	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3e2      	bcc.n	8004d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b08b      	sub	sp, #44	; 0x2c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	089b      	lsrs	r3, r3, #2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
 8004d9e:	e014      	b.n	8004dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	3301      	adds	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3e6      	bcc.n	8004da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de2:	461a      	mov	r2, r3
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3301      	adds	r3, #1
 8004e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	3301      	adds	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ea      	bne.n	8004dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	372c      	adds	r7, #44	; 0x2c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d12c      	bne.n	8004e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db12      	blt.n	8004e78 <USB_EPSetStall+0x54>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00f      	beq.n	8004e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e02b      	b.n	8004ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db12      	blt.n	8004ed2 <USB_EPSetStall+0xae>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d128      	bne.n	8004f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d003      	beq.n	8004f4c <USB_EPClearStall+0x4c>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	791b      	ldrb	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d138      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e027      	b.n	8004fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	791b      	ldrb	r3, [r3, #4]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d003      	beq.n	8004f9e <USB_EPClearStall+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	791b      	ldrb	r3, [r3, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d10f      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005046:	f023 0302 	bic.w	r3, r3, #2
 800504a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	0c1b      	lsrs	r3, r3, #16
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	b29b      	uxth	r3, r3
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005158:	68bb      	ldr	r3, [r7, #8]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	b2db      	uxtb	r3, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051b4:	68bb      	ldr	r3, [r7, #8]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051fc:	f023 0307 	bic.w	r3, r3, #7
 8005200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	460b      	mov	r3, r1
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	333c      	adds	r3, #60	; 0x3c
 800523a:	3304      	adds	r3, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <USB_EP0_OutStart+0xb8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d90a      	bls.n	800525e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005258:	d101      	bne.n	800525e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e037      	b.n	80052ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528c:	f043 0318 	orr.w	r3, r3, #24
 8005290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10f      	bne.n	80052cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	4f54300a 	.word	0x4f54300a

080052e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a13      	ldr	r2, [pc, #76]	; (8005344 <USB_CoreReset+0x64>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e01b      	b.n	8005336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	daf2      	bge.n	80052ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <USB_CoreReset+0x64>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d0f0      	beq.n	8005316 <USB_CoreReset+0x36>

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	00030d40 	.word	0x00030d40

08005348 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005354:	2010      	movs	r0, #16
 8005356:	f002 f911 	bl	800757c <USBD_static_malloc>
 800535a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	32b0      	adds	r2, #176	; 0xb0
 800536c:	2100      	movs	r1, #0
 800536e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005372:	2302      	movs	r3, #2
 8005374:	e048      	b.n	8005408 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	32b0      	adds	r2, #176	; 0xb0
 8005390:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7c1b      	ldrb	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <USBD_HID_Init+0xc8>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3326      	adds	r3, #38	; 0x26
 80053b8:	2207      	movs	r2, #7
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e00c      	b.n	80053d8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <USBD_HID_Init+0xc8>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	f003 020f 	and.w	r2, r3, #15
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3326      	adds	r3, #38	; 0x26
 80053d4:	220a      	movs	r2, #10
 80053d6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <USBD_HID_Init+0xc8>)
 80053da:	7819      	ldrb	r1, [r3, #0]
 80053dc:	2304      	movs	r3, #4
 80053de:	2203      	movs	r2, #3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 ffba 	bl	800735a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <USBD_HID_Init+0xc8>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3324      	adds	r3, #36	; 0x24
 80053fc:	2201      	movs	r2, #1
 80053fe:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200000bf 	.word	0x200000bf

08005414 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005420:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <USBD_HID_DeInit+0x8c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 ffbd 	bl	80073a6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800542c:	4b1c      	ldr	r3, [pc, #112]	; (80054a0 <USBD_HID_DeInit+0x8c>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3324      	adds	r3, #36	; 0x24
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <USBD_HID_DeInit+0x8c>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f003 020f 	and.w	r2, r3, #15
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	3326      	adds	r3, #38	; 0x26
 800545c:	2200      	movs	r2, #0
 800545e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	32b0      	adds	r2, #176	; 0xb0
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d011      	beq.n	8005496 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	32b0      	adds	r2, #176	; 0xb0
 800547c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005480:	4618      	mov	r0, r3
 8005482:	f002 f889 	bl	8007598 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	32b0      	adds	r2, #176	; 0xb0
 8005490:	2100      	movs	r1, #0
 8005492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	200000bf 	.word	0x200000bf

080054a4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	32b0      	adds	r2, #176	; 0xb0
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0e8      	b.n	80056a2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d046      	beq.n	800556a <USBD_HID_Setup+0xc6>
 80054dc:	2b20      	cmp	r3, #32
 80054de:	f040 80d8 	bne.w	8005692 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	3b02      	subs	r3, #2
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d836      	bhi.n	800555a <USBD_HID_Setup+0xb6>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <USBD_HID_Setup+0x50>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	0800554b 	.word	0x0800554b
 80054f8:	0800552b 	.word	0x0800552b
 80054fc:	0800555b 	.word	0x0800555b
 8005500:	0800555b 	.word	0x0800555b
 8005504:	0800555b 	.word	0x0800555b
 8005508:	0800555b 	.word	0x0800555b
 800550c:	0800555b 	.word	0x0800555b
 8005510:	0800555b 	.word	0x0800555b
 8005514:	08005539 	.word	0x08005539
 8005518:	0800551d 	.word	0x0800551d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	885b      	ldrh	r3, [r3, #2]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]
          break;
 8005528:	e01e      	b.n	8005568 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fbd5 	bl	8006ce0 <USBD_CtlSendData>
          break;
 8005536:	e017      	b.n	8005568 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	885b      	ldrh	r3, [r3, #2]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b29b      	uxth	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	605a      	str	r2, [r3, #4]
          break;
 8005548:	e00e      	b.n	8005568 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3304      	adds	r3, #4
 800554e:	2201      	movs	r2, #1
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fbc4 	bl	8006ce0 <USBD_CtlSendData>
          break;
 8005558:	e006      	b.n	8005568 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 fb4e 	bl	8006bfe <USBD_CtlError>
          ret = USBD_FAIL;
 8005562:	2303      	movs	r3, #3
 8005564:	75fb      	strb	r3, [r7, #23]
          break;
 8005566:	bf00      	nop
      }
      break;
 8005568:	e09a      	b.n	80056a0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b0b      	cmp	r3, #11
 8005570:	f200 8086 	bhi.w	8005680 <USBD_HID_Setup+0x1dc>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <USBD_HID_Setup+0xd8>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055ad 	.word	0x080055ad
 8005580:	0800568f 	.word	0x0800568f
 8005584:	08005681 	.word	0x08005681
 8005588:	08005681 	.word	0x08005681
 800558c:	08005681 	.word	0x08005681
 8005590:	08005681 	.word	0x08005681
 8005594:	080055d7 	.word	0x080055d7
 8005598:	08005681 	.word	0x08005681
 800559c:	08005681 	.word	0x08005681
 80055a0:	08005681 	.word	0x08005681
 80055a4:	0800562f 	.word	0x0800562f
 80055a8:	08005659 	.word	0x08005659
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d107      	bne.n	80055c8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055b8:	f107 030a 	add.w	r3, r7, #10
 80055bc:	2202      	movs	r2, #2
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 fb8d 	bl	8006ce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055c6:	e063      	b.n	8005690 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fb17 	bl	8006bfe <USBD_CtlError>
            ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	75fb      	strb	r3, [r7, #23]
          break;
 80055d4:	e05c      	b.n	8005690 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	885b      	ldrh	r3, [r3, #2]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b22      	cmp	r3, #34	; 0x22
 80055e0:	d108      	bne.n	80055f4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	88db      	ldrh	r3, [r3, #6]
 80055e6:	2b3f      	cmp	r3, #63	; 0x3f
 80055e8:	bf28      	it	cs
 80055ea:	233f      	movcs	r3, #63	; 0x3f
 80055ec:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <USBD_HID_Setup+0x208>)
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e015      	b.n	8005620 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	885b      	ldrh	r3, [r3, #2]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b21      	cmp	r3, #33	; 0x21
 80055fe:	d108      	bne.n	8005612 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005600:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <USBD_HID_Setup+0x20c>)
 8005602:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	88db      	ldrh	r3, [r3, #6]
 8005608:	2b09      	cmp	r3, #9
 800560a:	bf28      	it	cs
 800560c:	2309      	movcs	r3, #9
 800560e:	82bb      	strh	r3, [r7, #20]
 8005610:	e006      	b.n	8005620 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 faf2 	bl	8006bfe <USBD_CtlError>
            ret = USBD_FAIL;
 800561a:	2303      	movs	r3, #3
 800561c:	75fb      	strb	r3, [r7, #23]
            break;
 800561e:	e037      	b.n	8005690 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005620:	8abb      	ldrh	r3, [r7, #20]
 8005622:	461a      	mov	r2, r3
 8005624:	6939      	ldr	r1, [r7, #16]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fb5a 	bl	8006ce0 <USBD_CtlSendData>
          break;
 800562c:	e030      	b.n	8005690 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3308      	adds	r3, #8
 800563e:	2201      	movs	r2, #1
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fb4c 	bl	8006ce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005648:	e022      	b.n	8005690 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fad6 	bl	8006bfe <USBD_CtlError>
            ret = USBD_FAIL;
 8005652:	2303      	movs	r3, #3
 8005654:	75fb      	strb	r3, [r7, #23]
          break;
 8005656:	e01b      	b.n	8005690 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b03      	cmp	r3, #3
 8005662:	d106      	bne.n	8005672 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	885b      	ldrh	r3, [r3, #2]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005670:	e00e      	b.n	8005690 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 fac2 	bl	8006bfe <USBD_CtlError>
            ret = USBD_FAIL;
 800567a:	2303      	movs	r3, #3
 800567c:	75fb      	strb	r3, [r7, #23]
          break;
 800567e:	e007      	b.n	8005690 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fabb 	bl	8006bfe <USBD_CtlError>
          ret = USBD_FAIL;
 8005688:	2303      	movs	r3, #3
 800568a:	75fb      	strb	r3, [r7, #23]
          break;
 800568c:	e000      	b.n	8005690 <USBD_HID_Setup+0x1ec>
          break;
 800568e:	bf00      	nop
      }
      break;
 8005690:	e006      	b.n	80056a0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fab2 	bl	8006bfe <USBD_CtlError>
      ret = USBD_FAIL;
 800569a:	2303      	movs	r3, #3
 800569c:	75fb      	strb	r3, [r7, #23]
      break;
 800569e:	bf00      	nop
  }

  return (uint8_t)ret;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000080 	.word	0x20000080
 80056b0:	20000068 	.word	0x20000068

080056b4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	32b0      	adds	r2, #176	; 0xb0
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80056d8:	2303      	movs	r3, #3
 80056da:	e014      	b.n	8005706 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d10d      	bne.n	8005704 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	7b1b      	ldrb	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2201      	movs	r2, #1
 80056f4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <USBD_HID_SendReport+0x5c>)
 80056f8:	7819      	ldrb	r1, [r3, #0]
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 fef9 	bl	80074f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	200000bf 	.word	0x200000bf

08005714 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800571c:	2181      	movs	r1, #129	; 0x81
 800571e:	4809      	ldr	r0, [pc, #36]	; (8005744 <USBD_HID_GetFSCfgDesc+0x30>)
 8005720:	f000 fc35 	bl	8005f8e <USBD_GetEpDesc>
 8005724:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	220a      	movs	r2, #10
 8005730:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2222      	movs	r2, #34	; 0x22
 8005736:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005738:	4b02      	ldr	r3, [pc, #8]	; (8005744 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000044 	.word	0x20000044

08005748 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005750:	2181      	movs	r1, #129	; 0x81
 8005752:	4809      	ldr	r0, [pc, #36]	; (8005778 <USBD_HID_GetHSCfgDesc+0x30>)
 8005754:	f000 fc1b 	bl	8005f8e <USBD_GetEpDesc>
 8005758:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2207      	movs	r2, #7
 8005764:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2222      	movs	r2, #34	; 0x22
 800576a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800576c:	4b02      	ldr	r3, [pc, #8]	; (8005778 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000044 	.word	0x20000044

0800577c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005784:	2181      	movs	r1, #129	; 0x81
 8005786:	4809      	ldr	r0, [pc, #36]	; (80057ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005788:	f000 fc01 	bl	8005f8e <USBD_GetEpDesc>
 800578c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	220a      	movs	r2, #10
 8005798:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2222      	movs	r2, #34	; 0x22
 800579e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000044 	.word	0x20000044

080057b0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	32b0      	adds	r2, #176	; 0xb0
 80057c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ca:	2200      	movs	r2, #0
 80057cc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	220a      	movs	r2, #10
 80057e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80057ea:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	20000074 	.word	0x20000074

080057fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e01f      	b.n	8005854 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	79fa      	ldrb	r2, [r7, #7]
 8005846:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f001 fd1f 	bl	800728c <USBD_LL_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	e025      	b.n	80058c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	32ae      	adds	r2, #174	; 0xae
 8005886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00f      	beq.n	80058b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	32ae      	adds	r2, #174	; 0xae
 800589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	f107 020e 	add.w	r2, r7, #14
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fd27 	bl	8007324 <USBD_LL_Start>
 80058d6:	4603      	mov	r3, r0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	4611      	mov	r1, r2
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	4611      	mov	r1, r2
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005954:	2303      	movs	r3, #3
 8005956:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f908 	bl	8006b8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b02      	cmp	r3, #2
 800599c:	d01a      	beq.n	80059d4 <USBD_LL_SetupStage+0x72>
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d822      	bhi.n	80059e8 <USBD_LL_SetupStage+0x86>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <USBD_LL_SetupStage+0x4a>
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d00a      	beq.n	80059c0 <USBD_LL_SetupStage+0x5e>
 80059aa:	e01d      	b.n	80059e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fb5f 	bl	8006078 <USBD_StdDevReq>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e020      	b.n	8005a02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fbc7 	bl	800615c <USBD_StdItfReq>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
      break;
 80059d2:	e016      	b.n	8005a02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fc29 	bl	8006234 <USBD_StdEPReq>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
      break;
 80059e6:	e00c      	b.n	8005a02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fcf4 	bl	80073e4 <USBD_LL_StallEP>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	bf00      	nop
  }

  return ret;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	460b      	mov	r3, r1
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a1e:	7afb      	ldrb	r3, [r7, #11]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d16e      	bne.n	8005b02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	f040 8098 	bne.w	8005b68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d913      	bls.n	8005a6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	1ad2      	subs	r2, r2, r3
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bf28      	it	cs
 8005a5e:	4613      	movcs	r3, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f967 	bl	8006d38 <USBD_CtlContinueRx>
 8005a6a:	e07d      	b.n	8005b68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d014      	beq.n	8005aa4 <USBD_LL_DataOutStage+0x98>
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d81d      	bhi.n	8005aba <USBD_LL_DataOutStage+0xae>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <USBD_LL_DataOutStage+0x7c>
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d003      	beq.n	8005a8e <USBD_LL_DataOutStage+0x82>
 8005a86:	e018      	b.n	8005aba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a8c:	e018      	b.n	8005ac0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fa5e 	bl	8005f5a <USBD_CoreFindIF>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8005aa2:	e00d      	b.n	8005ac0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fa60 	bl	8005f74 <USBD_CoreFindEP>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab8:	e002      	b.n	8005ac0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75bb      	strb	r3, [r7, #22]
            break;
 8005abe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d119      	bne.n	8005afa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d113      	bne.n	8005afa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ad2:	7dba      	ldrb	r2, [r7, #22]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	32ae      	adds	r2, #174	; 0xae
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ae2:	7dba      	ldrb	r2, [r7, #22]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005aea:	7dba      	ldrb	r2, [r7, #22]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	32ae      	adds	r2, #174	; 0xae
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 f92d 	bl	8006d5a <USBD_CtlSendStatus>
 8005b00:	e032      	b.n	8005b68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fa31 	bl	8005f74 <USBD_CoreFindEP>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	2bff      	cmp	r3, #255	; 0xff
 8005b1a:	d025      	beq.n	8005b68 <USBD_LL_DataOutStage+0x15c>
 8005b1c:	7dbb      	ldrb	r3, [r7, #22]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d122      	bne.n	8005b68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d117      	bne.n	8005b5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b2e:	7dba      	ldrb	r2, [r7, #22]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	32ae      	adds	r2, #174	; 0xae
 8005b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b3e:	7dba      	ldrb	r2, [r7, #22]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b46:	7dba      	ldrb	r2, [r7, #22]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	32ae      	adds	r2, #174	; 0xae
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	7afa      	ldrb	r2, [r7, #11]
 8005b54:	4611      	mov	r1, r2
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	e000      	b.n	8005b6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d16f      	bne.n	8005c66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3314      	adds	r3, #20
 8005b8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d15a      	bne.n	8005c4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d914      	bls.n	8005bcc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f001 f8ac 	bl	8006d16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f001 fcb7 	bl	8007538 <USBD_LL_PrepareReceive>
 8005bca:	e03f      	b.n	8005c4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d11c      	bne.n	8005c12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d316      	bcc.n	8005c12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d20f      	bcs.n	8005c12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f001 f88d 	bl	8006d16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c04:	2300      	movs	r3, #0
 8005c06:	2200      	movs	r2, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f001 fc94 	bl	8007538 <USBD_LL_PrepareReceive>
 8005c10:	e01c      	b.n	8005c4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d10f      	bne.n	8005c3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f001 fbcf 	bl	80073e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f001 f89a 	bl	8006d80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03a      	beq.n	8005ccc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fe42 	bl	80058e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c64:	e032      	b.n	8005ccc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f97f 	bl	8005f74 <USBD_CoreFindEP>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d025      	beq.n	8005ccc <USBD_LL_DataInStage+0x15a>
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d122      	bne.n	8005ccc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d11c      	bne.n	8005ccc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c92:	7dfa      	ldrb	r2, [r7, #23]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	32ae      	adds	r2, #174	; 0xae
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ca2:	7dfa      	ldrb	r2, [r7, #23]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005caa:	7dfa      	ldrb	r2, [r7, #23]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	32ae      	adds	r2, #174	; 0xae
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	7afa      	ldrb	r2, [r7, #11]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	4798      	blx	r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cc2:	7dbb      	ldrb	r3, [r7, #22]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	e000      	b.n	8005cce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d014      	beq.n	8005d3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6852      	ldr	r2, [r2, #4]
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fb09 	bl	800735a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2240      	movs	r2, #64	; 0x40
 8005d54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d58:	2340      	movs	r3, #64	; 0x40
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2180      	movs	r1, #128	; 0x80
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fafb 	bl	800735a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2240      	movs	r2, #64	; 0x40
 8005d6e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d106      	bne.n	8005de8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d110      	bne.n	8005e2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	32ae      	adds	r2, #174	; 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e01c      	b.n	8005e92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d115      	bne.n	8005e90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	32ae      	adds	r2, #174	; 0xae
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32ae      	adds	r2, #174	; 0xae
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	32ae      	adds	r2, #174	; 0xae
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e01c      	b.n	8005ef6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d115      	bne.n	8005ef4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	; 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32ae      	adds	r2, #174	; 0xae
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6852      	ldr	r2, [r2, #4]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	4611      	mov	r1, r2
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	885b      	ldrh	r3, [r3, #2]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d920      	bls.n	8005ff8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fbe:	e013      	b.n	8005fe8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fc0:	f107 030a 	add.w	r3, r7, #10
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6978      	ldr	r0, [r7, #20]
 8005fc8:	f000 f81b 	bl	8006002 <USBD_GetNextDesc>
 8005fcc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d108      	bne.n	8005fe8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	789b      	ldrb	r3, [r3, #2]
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d008      	beq.n	8005ff6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	885b      	ldrh	r3, [r3, #2]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	897b      	ldrh	r3, [r7, #10]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d8e5      	bhi.n	8005fc0 <USBD_GetEpDesc+0x32>
 8005ff4:	e000      	b.n	8005ff8 <USBD_GetEpDesc+0x6a>
          break;
 8005ff6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005ff8:	693b      	ldr	r3, [r7, #16]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	4413      	add	r3, r2
 800601c:	b29a      	uxth	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3301      	adds	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800605a:	8a3b      	ldrh	r3, [r7, #16]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	b21a      	sxth	r2, r3
 8006060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800606a:	89fb      	ldrh	r3, [r7, #14]
}
 800606c:	4618      	mov	r0, r3
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d005      	beq.n	800609e <USBD_StdDevReq+0x26>
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d857      	bhi.n	8006146 <USBD_StdDevReq+0xce>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00f      	beq.n	80060ba <USBD_StdDevReq+0x42>
 800609a:	2b20      	cmp	r3, #32
 800609c:	d153      	bne.n	8006146 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	32ae      	adds	r2, #174	; 0xae
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
      break;
 80060b8:	e04a      	b.n	8006150 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b09      	cmp	r3, #9
 80060c0:	d83b      	bhi.n	800613a <USBD_StdDevReq+0xc2>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <USBD_StdDevReq+0x50>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	08006131 	.word	0x08006131
 80060d0:	0800613b 	.word	0x0800613b
 80060d4:	08006127 	.word	0x08006127
 80060d8:	0800613b 	.word	0x0800613b
 80060dc:	080060fb 	.word	0x080060fb
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	0800613b 	.word	0x0800613b
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006105 	.word	0x08006105
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fa3c 	bl	8006570 <USBD_GetDescriptor>
          break;
 80060f8:	e024      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fba1 	bl	8006844 <USBD_SetAddress>
          break;
 8006102:	e01f      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fbe0 	bl	80068cc <USBD_SetConfig>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
          break;
 8006110:	e018      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fc83 	bl	8006a20 <USBD_GetConfig>
          break;
 800611a:	e013      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fcb4 	bl	8006a8c <USBD_GetStatus>
          break;
 8006124:	e00e      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fce3 	bl	8006af4 <USBD_SetFeature>
          break;
 800612e:	e009      	b.n	8006144 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fd07 	bl	8006b46 <USBD_ClrFeature>
          break;
 8006138:	e004      	b.n	8006144 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fd5e 	bl	8006bfe <USBD_CtlError>
          break;
 8006142:	bf00      	nop
      }
      break;
 8006144:	e004      	b.n	8006150 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fd58 	bl	8006bfe <USBD_CtlError>
      break;
 800614e:	bf00      	nop
  }

  return ret;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d005      	beq.n	8006182 <USBD_StdItfReq+0x26>
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d852      	bhi.n	8006220 <USBD_StdItfReq+0xc4>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <USBD_StdItfReq+0x26>
 800617e:	2b20      	cmp	r3, #32
 8006180:	d14e      	bne.n	8006220 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	2b02      	cmp	r3, #2
 800618e:	d840      	bhi.n	8006212 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	889b      	ldrh	r3, [r3, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d836      	bhi.n	8006208 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	889b      	ldrh	r3, [r3, #4]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fed9 	bl	8005f5a <USBD_CoreFindIF>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2bff      	cmp	r3, #255	; 0xff
 80061b0:	d01d      	beq.n	80061ee <USBD_StdItfReq+0x92>
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11a      	bne.n	80061ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061b8:	7bba      	ldrb	r2, [r7, #14]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32ae      	adds	r2, #174	; 0xae
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00f      	beq.n	80061e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061c8:	7bba      	ldrb	r2, [r7, #14]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061d0:	7bba      	ldrb	r2, [r7, #14]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32ae      	adds	r2, #174	; 0xae
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061e6:	e004      	b.n	80061f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061ec:	e001      	b.n	80061f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	88db      	ldrh	r3, [r3, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d110      	bne.n	800621c <USBD_StdItfReq+0xc0>
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fdaa 	bl	8006d5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006206:	e009      	b.n	800621c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fcf7 	bl	8006bfe <USBD_CtlError>
          break;
 8006210:	e004      	b.n	800621c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fcf2 	bl	8006bfe <USBD_CtlError>
          break;
 800621a:	e000      	b.n	800621e <USBD_StdItfReq+0xc2>
          break;
 800621c:	bf00      	nop
      }
      break;
 800621e:	e004      	b.n	800622a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fceb 	bl	8006bfe <USBD_CtlError>
      break;
 8006228:	bf00      	nop
  }

  return ret;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	889b      	ldrh	r3, [r3, #4]
 8006246:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d007      	beq.n	8006264 <USBD_StdEPReq+0x30>
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	f200 817f 	bhi.w	8006558 <USBD_StdEPReq+0x324>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d02a      	beq.n	80062b4 <USBD_StdEPReq+0x80>
 800625e:	2b20      	cmp	r3, #32
 8006260:	f040 817a 	bne.w	8006558 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fe83 	bl	8005f74 <USBD_CoreFindEP>
 800626e:	4603      	mov	r3, r0
 8006270:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006272:	7b7b      	ldrb	r3, [r7, #13]
 8006274:	2bff      	cmp	r3, #255	; 0xff
 8006276:	f000 8174 	beq.w	8006562 <USBD_StdEPReq+0x32e>
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8170 	bne.w	8006562 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006282:	7b7a      	ldrb	r2, [r7, #13]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800628a:	7b7a      	ldrb	r2, [r7, #13]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32ae      	adds	r2, #174	; 0xae
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8163 	beq.w	8006562 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800629c:	7b7a      	ldrb	r2, [r7, #13]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	32ae      	adds	r2, #174	; 0xae
 80062a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062b2:	e156      	b.n	8006562 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d008      	beq.n	80062ce <USBD_StdEPReq+0x9a>
 80062bc:	2b03      	cmp	r3, #3
 80062be:	f300 8145 	bgt.w	800654c <USBD_StdEPReq+0x318>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 809b 	beq.w	80063fe <USBD_StdEPReq+0x1ca>
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d03c      	beq.n	8006346 <USBD_StdEPReq+0x112>
 80062cc:	e13e      	b.n	800654c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d002      	beq.n	80062e0 <USBD_StdEPReq+0xac>
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d016      	beq.n	800630c <USBD_StdEPReq+0xd8>
 80062de:	e02c      	b.n	800633a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <USBD_StdEPReq+0xce>
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d00a      	beq.n	8006302 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 f877 	bl	80073e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f873 	bl	80073e4 <USBD_LL_StallEP>
 80062fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006300:	e020      	b.n	8006344 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fc7a 	bl	8006bfe <USBD_CtlError>
              break;
 800630a:	e01b      	b.n	8006344 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	885b      	ldrh	r3, [r3, #2]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10e      	bne.n	8006332 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <USBD_StdEPReq+0xfe>
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b80      	cmp	r3, #128	; 0x80
 800631e:	d008      	beq.n	8006332 <USBD_StdEPReq+0xfe>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	88db      	ldrh	r3, [r3, #6]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f859 	bl	80073e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fd11 	bl	8006d5a <USBD_CtlSendStatus>

              break;
 8006338:	e004      	b.n	8006344 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc5e 	bl	8006bfe <USBD_CtlError>
              break;
 8006342:	bf00      	nop
          }
          break;
 8006344:	e107      	b.n	8006556 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d002      	beq.n	8006358 <USBD_StdEPReq+0x124>
 8006352:	2b03      	cmp	r3, #3
 8006354:	d016      	beq.n	8006384 <USBD_StdEPReq+0x150>
 8006356:	e04b      	b.n	80063f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <USBD_StdEPReq+0x146>
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d00a      	beq.n	800637a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f83b 	bl	80073e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 f837 	bl	80073e4 <USBD_LL_StallEP>
 8006376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006378:	e040      	b.n	80063fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fc3e 	bl	8006bfe <USBD_CtlError>
              break;
 8006382:	e03b      	b.n	80063fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d136      	bne.n	80063fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 f841 	bl	8007422 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fcda 	bl	8006d5a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fde2 	bl	8005f74 <USBD_CoreFindEP>
 80063b0:	4603      	mov	r3, r0
 80063b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063b4:	7b7b      	ldrb	r3, [r7, #13]
 80063b6:	2bff      	cmp	r3, #255	; 0xff
 80063b8:	d01f      	beq.n	80063fa <USBD_StdEPReq+0x1c6>
 80063ba:	7b7b      	ldrb	r3, [r7, #13]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11c      	bne.n	80063fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063c0:	7b7a      	ldrb	r2, [r7, #13]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063c8:	7b7a      	ldrb	r2, [r7, #13]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	32ae      	adds	r2, #174	; 0xae
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d010      	beq.n	80063fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063ee:	e004      	b.n	80063fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fc03 	bl	8006bfe <USBD_CtlError>
              break;
 80063f8:	e000      	b.n	80063fc <USBD_StdEPReq+0x1c8>
              break;
 80063fa:	bf00      	nop
          }
          break;
 80063fc:	e0ab      	b.n	8006556 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d002      	beq.n	8006410 <USBD_StdEPReq+0x1dc>
 800640a:	2b03      	cmp	r3, #3
 800640c:	d032      	beq.n	8006474 <USBD_StdEPReq+0x240>
 800640e:	e097      	b.n	8006540 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <USBD_StdEPReq+0x1f2>
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d004      	beq.n	8006426 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fbed 	bl	8006bfe <USBD_CtlError>
                break;
 8006424:	e091      	b.n	800654a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da0b      	bge.n	8006446 <USBD_StdEPReq+0x212>
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	3310      	adds	r3, #16
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	3304      	adds	r3, #4
 8006444:	e00b      	b.n	800645e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4413      	add	r3, r2
 800645c:	3304      	adds	r3, #4
 800645e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2202      	movs	r2, #2
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fc37 	bl	8006ce0 <USBD_CtlSendData>
              break;
 8006472:	e06a      	b.n	800654a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006478:	2b00      	cmp	r3, #0
 800647a:	da11      	bge.n	80064a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	f003 020f 	and.w	r2, r3, #15
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	3324      	adds	r3, #36	; 0x24
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d117      	bne.n	80064c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fbb0 	bl	8006bfe <USBD_CtlError>
                  break;
 800649e:	e054      	b.n	800654a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	f003 020f 	and.w	r2, r3, #15
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fb9d 	bl	8006bfe <USBD_CtlError>
                  break;
 80064c4:	e041      	b.n	800654a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da0b      	bge.n	80064e6 <USBD_StdEPReq+0x2b2>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	3310      	adds	r3, #16
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	e00b      	b.n	80064fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	3304      	adds	r3, #4
 80064fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <USBD_StdEPReq+0x2d8>
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d103      	bne.n	8006514 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e00e      	b.n	8006532 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ffa1 	bl	8007460 <USBD_LL_IsStallEP>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e002      	b.n	8006532 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2202      	movs	r2, #2
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbd1 	bl	8006ce0 <USBD_CtlSendData>
              break;
 800653e:	e004      	b.n	800654a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb5b 	bl	8006bfe <USBD_CtlError>
              break;
 8006548:	bf00      	nop
          }
          break;
 800654a:	e004      	b.n	8006556 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fb55 	bl	8006bfe <USBD_CtlError>
          break;
 8006554:	bf00      	nop
      }
      break;
 8006556:	e005      	b.n	8006564 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb4f 	bl	8006bfe <USBD_CtlError>
      break;
 8006560:	e000      	b.n	8006564 <USBD_StdEPReq+0x330>
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	885b      	ldrh	r3, [r3, #2]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	2b06      	cmp	r3, #6
 8006592:	f200 8128 	bhi.w	80067e6 <USBD_GetDescriptor+0x276>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <USBD_GetDescriptor+0x2c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	08006611 	.word	0x08006611
 80065a8:	080067e7 	.word	0x080067e7
 80065ac:	080067e7 	.word	0x080067e7
 80065b0:	08006787 	.word	0x08006787
 80065b4:	080067b3 	.word	0x080067b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	7c12      	ldrb	r2, [r2, #16]
 80065c4:	f107 0108 	add.w	r1, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
      break;
 80065ce:	e112      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065f2:	e100      	b.n	80067f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	2202      	movs	r2, #2
 800660c:	701a      	strb	r2, [r3, #0]
      break;
 800660e:	e0f2      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b05      	cmp	r3, #5
 8006618:	f200 80ac 	bhi.w	8006774 <USBD_GetDescriptor+0x204>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USBD_GetDescriptor+0xb4>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	0800663d 	.word	0x0800663d
 8006628:	08006671 	.word	0x08006671
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066d9 	.word	0x080066d9
 8006634:	0800670d 	.word	0x0800670d
 8006638:	08006741 	.word	0x08006741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7c12      	ldrb	r2, [r2, #16]
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665e:	e091      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 facb 	bl	8006bfe <USBD_CtlError>
            err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
          break;
 800666e:	e089      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006692:	e077      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fab1 	bl	8006bfe <USBD_CtlError>
            err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
          break;
 80066a2:	e06f      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e05d      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa97 	bl	8006bfe <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e055      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e043      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa7d 	bl	8006bfe <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e03b      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e029      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa63 	bl	8006bfe <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e021      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e00f      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa49 	bl	8006bfe <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e007      	b.n	8006784 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa41 	bl	8006bfe <USBD_CtlError>
          err++;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	3301      	adds	r3, #1
 8006780:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e037      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7c1b      	ldrb	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f107 0208 	add.w	r2, r7, #8
 800679a:	4610      	mov	r0, r2
 800679c:	4798      	blx	r3
 800679e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a0:	e029      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fa2a 	bl	8006bfe <USBD_CtlError>
        err++;
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	3301      	adds	r3, #1
 80067ae:	72fb      	strb	r3, [r7, #11]
      break;
 80067b0:	e021      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	2207      	movs	r2, #7
 80067d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d4:	e00f      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa10 	bl	8006bfe <USBD_CtlError>
        err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	e007      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa08 	bl	8006bfe <USBD_CtlError>
      err++;
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	3301      	adds	r3, #1
 80067f2:	72fb      	strb	r3, [r7, #11]
      break;
 80067f4:	bf00      	nop
  }

  if (err != 0U)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11e      	bne.n	800683a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88da      	ldrh	r2, [r3, #6]
 800680e:	893b      	ldrh	r3, [r7, #8]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	461a      	mov	r2, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa5d 	bl	8006ce0 <USBD_CtlSendData>
 8006826:	e009      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9e7 	bl	8006bfe <USBD_CtlError>
 8006830:	e004      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa91 	bl	8006d5a <USBD_CtlSendStatus>
 8006838:	e000      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    return;
 800683a:	bf00      	nop
  }
}
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	889b      	ldrh	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d131      	bne.n	80068ba <USBD_SetAddress+0x76>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12d      	bne.n	80068ba <USBD_SetAddress+0x76>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d829      	bhi.n	80068ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d104      	bne.n	8006888 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9bc 	bl	8006bfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	e01d      	b.n	80068c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fe0f 	bl	80074b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa5d 	bl	8006d5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	e009      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	e004      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f99e 	bl	8006bfe <USBD_CtlError>
  }
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	885b      	ldrh	r3, [r3, #2]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <USBD_SetConfig+0x150>)
 80068e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068e4:	4b4d      	ldr	r3, [pc, #308]	; (8006a1c <USBD_SetConfig+0x150>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d905      	bls.n	80068f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f985 	bl	8006bfe <USBD_CtlError>
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e08c      	b.n	8006a12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_SetConfig+0x3e>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d029      	beq.n	800695c <USBD_SetConfig+0x90>
 8006908:	e075      	b.n	80069f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800690a:	4b44      	ldr	r3, [pc, #272]	; (8006a1c <USBD_SetConfig+0x150>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d020      	beq.n	8006954 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006912:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <USBD_SetConfig+0x150>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800691c:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <USBD_SetConfig+0x150>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fe ffe7 	bl	80058f6 <USBD_SetClassConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f962 	bl	8006bfe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006942:	e065      	b.n	8006a10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa08 	bl	8006d5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2203      	movs	r2, #3
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006952:	e05d      	b.n	8006a10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa00 	bl	8006d5a <USBD_CtlSendStatus>
      break;
 800695a:	e059      	b.n	8006a10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800695c:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <USBD_SetConfig+0x150>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d112      	bne.n	800698a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <USBD_SetConfig+0x150>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006976:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <USBD_SetConfig+0x150>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fe ffd6 	bl	800592e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9e9 	bl	8006d5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006988:	e042      	b.n	8006a10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <USBD_SetConfig+0x150>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d02a      	beq.n	80069ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fe ffc4 	bl	800592e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <USBD_SetConfig+0x150>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <USBD_SetConfig+0x150>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fe ff9d 	bl	80058f6 <USBD_SetClassConfig>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f918 	bl	8006bfe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe ffa9 	bl	800592e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069e4:	e014      	b.n	8006a10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9b7 	bl	8006d5a <USBD_CtlSendStatus>
      break;
 80069ec:	e010      	b.n	8006a10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9b3 	bl	8006d5a <USBD_CtlSendStatus>
      break;
 80069f4:	e00c      	b.n	8006a10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f900 	bl	8006bfe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <USBD_SetConfig+0x150>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fe ff92 	bl	800592e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0e:	bf00      	nop
  }

  return ret;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200001e4 	.word	0x200001e4

08006a20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d004      	beq.n	8006a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8e2 	bl	8006bfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a3a:	e023      	b.n	8006a84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	dc02      	bgt.n	8006a4e <USBD_GetConfig+0x2e>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc03      	bgt.n	8006a54 <USBD_GetConfig+0x34>
 8006a4c:	e015      	b.n	8006a7a <USBD_GetConfig+0x5a>
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d00b      	beq.n	8006a6a <USBD_GetConfig+0x4a>
 8006a52:	e012      	b.n	8006a7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f93c 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006a68:	e00c      	b.n	8006a84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f934 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006a78:	e004      	b.n	8006a84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8be 	bl	8006bfe <USBD_CtlError>
        break;
 8006a82:	bf00      	nop
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d81e      	bhi.n	8006ae2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	88db      	ldrh	r3, [r3, #6]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d004      	beq.n	8006ab6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8a5 	bl	8006bfe <USBD_CtlError>
        break;
 8006ab4:	e01a      	b.n	8006aec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f043 0202 	orr.w	r2, r3, #2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f900 	bl	8006ce0 <USBD_CtlSendData>
      break;
 8006ae0:	e004      	b.n	8006aec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f88a 	bl	8006bfe <USBD_CtlError>
      break;
 8006aea:	bf00      	nop
  }
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	885b      	ldrh	r3, [r3, #2]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d107      	bne.n	8006b16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f923 	bl	8006d5a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b14:	e013      	b.n	8006b3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d10b      	bne.n	8006b36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	889b      	ldrh	r3, [r3, #4]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f913 	bl	8006d5a <USBD_CtlSendStatus>
}
 8006b34:	e003      	b.n	8006b3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f860 	bl	8006bfe <USBD_CtlError>
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d80b      	bhi.n	8006b76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10c      	bne.n	8006b80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f8f3 	bl	8006d5a <USBD_CtlSendStatus>
      }
      break;
 8006b74:	e004      	b.n	8006b80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f840 	bl	8006bfe <USBD_CtlError>
      break;
 8006b7e:	e000      	b.n	8006b82 <USBD_ClrFeature+0x3c>
      break;
 8006b80:	bf00      	nop
  }
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fa41 	bl	800603c <SWAPBYTE>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fa34 	bl	800603c <SWAPBYTE>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fa27 	bl	800603c <SWAPBYTE>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	80da      	strh	r2, [r3, #6]
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c08:	2180      	movs	r1, #128	; 0x80
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbea 	bl	80073e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c10:	2100      	movs	r1, #0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fbe6 	bl	80073e4 <USBD_LL_StallEP>
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d036      	beq.n	8006ca4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f000 f836 	bl	8006cac <USBD_GetLen>
 8006c40:	4603      	mov	r3, r0
 8006c42:	3301      	adds	r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	2203      	movs	r2, #3
 8006c68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c70:	e013      	b.n	8006c9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4413      	add	r3, r2
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3301      	adds	r3, #1
 8006c82:	613b      	str	r3, [r7, #16]
    idx++;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	3301      	adds	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	3301      	adds	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e7      	bne.n	8006c72 <USBD_GetString+0x52>
 8006ca2:	e000      	b.n	8006ca6 <USBD_GetString+0x86>
    return;
 8006ca4:	bf00      	nop
  }
}
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cbc:	e005      	b.n	8006cca <USBD_GetLen+0x1e>
  {
    len++;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f5      	bne.n	8006cbe <USBD_GetLen+0x12>
  }

  return len;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	2100      	movs	r1, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fbf5 	bl	80074f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fbe4 	bl	80074f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fbf4 	bl	8007538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbc0 	bl	80074f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d90:	2300      	movs	r3, #0
 8006d92:	2200      	movs	r2, #0
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbce 	bl	8007538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dac:	2200      	movs	r2, #0
 8006dae:	490e      	ldr	r1, [pc, #56]	; (8006de8 <MX_USB_DEVICE_Init+0x40>)
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <MX_USB_DEVICE_Init+0x44>)
 8006db2:	f7fe fd23 	bl	80057fc <USBD_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dbc:	f7f9 ff0c 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006dc0:	490b      	ldr	r1, [pc, #44]	; (8006df0 <MX_USB_DEVICE_Init+0x48>)
 8006dc2:	480a      	ldr	r0, [pc, #40]	; (8006dec <MX_USB_DEVICE_Init+0x44>)
 8006dc4:	f7fe fd4a 	bl	800585c <USBD_RegisterClass>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dce:	f7f9 ff03 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dd2:	4806      	ldr	r0, [pc, #24]	; (8006dec <MX_USB_DEVICE_Init+0x44>)
 8006dd4:	f7fe fd78 	bl	80058c8 <USBD_Start>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006dde:	f7f9 fefb 	bl	8000bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	200000c0 	.word	0x200000c0
 8006dec:	200001e8 	.word	0x200001e8
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2212      	movs	r2, #18
 8006e04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e06:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	200000dc 	.word	0x200000dc

08006e18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2204      	movs	r2, #4
 8006e28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	200000f0 	.word	0x200000f0

08006e3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4907      	ldr	r1, [pc, #28]	; (8006e70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e52:	4808      	ldr	r0, [pc, #32]	; (8006e74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e54:	f7ff fee4 	bl	8006c20 <USBD_GetString>
 8006e58:	e004      	b.n	8006e64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4904      	ldr	r1, [pc, #16]	; (8006e70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e5e:	4805      	ldr	r0, [pc, #20]	; (8006e74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e60:	f7ff fede 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e64:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200004c4 	.word	0x200004c4
 8006e74:	08007f90 	.word	0x08007f90

08006e78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	4904      	ldr	r1, [pc, #16]	; (8006e98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e88:	4804      	ldr	r0, [pc, #16]	; (8006e9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e8a:	f7ff fec9 	bl	8006c20 <USBD_GetString>
  return USBD_StrDesc;
 8006e8e:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200004c4 	.word	0x200004c4
 8006e9c:	08007fa8 	.word	0x08007fa8

08006ea0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	221a      	movs	r2, #26
 8006eb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006eb2:	f000 f843 	bl	8006f3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006eb6:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200000f4 	.word	0x200000f4

08006ec4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4907      	ldr	r1, [pc, #28]	; (8006ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eda:	4808      	ldr	r0, [pc, #32]	; (8006efc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006edc:	f7ff fea0 	bl	8006c20 <USBD_GetString>
 8006ee0:	e004      	b.n	8006eec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4904      	ldr	r1, [pc, #16]	; (8006ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ee6:	4805      	ldr	r0, [pc, #20]	; (8006efc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ee8:	f7ff fe9a 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200004c4 	.word	0x200004c4
 8006efc:	08007fbc 	.word	0x08007fbc

08006f00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4907      	ldr	r1, [pc, #28]	; (8006f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f16:	4808      	ldr	r0, [pc, #32]	; (8006f38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f18:	f7ff fe82 	bl	8006c20 <USBD_GetString>
 8006f1c:	e004      	b.n	8006f28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f22:	4805      	ldr	r0, [pc, #20]	; (8006f38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f24:	f7ff fe7c 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200004c4 	.word	0x200004c4
 8006f38:	08007fc8 	.word	0x08007fc8

08006f3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <Get_SerialNum+0x44>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f48:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <Get_SerialNum+0x48>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <Get_SerialNum+0x4c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f62:	2208      	movs	r2, #8
 8006f64:	4909      	ldr	r1, [pc, #36]	; (8006f8c <Get_SerialNum+0x50>)
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f814 	bl	8006f94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	4908      	ldr	r1, [pc, #32]	; (8006f90 <Get_SerialNum+0x54>)
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f000 f80f 	bl	8006f94 <IntToUnicode>
  }
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	1fff7a10 	.word	0x1fff7a10
 8006f84:	1fff7a14 	.word	0x1fff7a14
 8006f88:	1fff7a18 	.word	0x1fff7a18
 8006f8c:	200000f6 	.word	0x200000f6
 8006f90:	20000106 	.word	0x20000106

08006f94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]
 8006faa:	e027      	b.n	8006ffc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	0f1b      	lsrs	r3, r3, #28
 8006fb0:	2b09      	cmp	r3, #9
 8006fb2:	d80b      	bhi.n	8006fcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0f1b      	lsrs	r3, r3, #28
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3230      	adds	r2, #48	; 0x30
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e00a      	b.n	8006fe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	0f1b      	lsrs	r3, r3, #28
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	440b      	add	r3, r1
 8006fdc:	3237      	adds	r2, #55	; 0x37
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	3301      	adds	r3, #1
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
 8006ffc:	7dfa      	ldrb	r2, [r7, #23]
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3d3      	bcc.n	8006fac <IntToUnicode+0x18>
  }
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800701c:	f107 0314 	add.w	r3, r7, #20
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007034:	d13a      	bne.n	80070ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	4b1e      	ldr	r3, [pc, #120]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	6313      	str	r3, [r2, #48]	; 0x30
 8007046:	4b1b      	ldr	r3, [pc, #108]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007052:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007058:	2302      	movs	r3, #2
 800705a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007060:	2303      	movs	r3, #3
 8007062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007064:	230a      	movs	r3, #10
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	4619      	mov	r1, r3
 800706e:	4812      	ldr	r0, [pc, #72]	; (80070b8 <HAL_PCD_MspInit+0xa4>)
 8007070:	f7fa f876 	bl	8001160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007074:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 8007076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007078:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 800707a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707e:	6353      	str	r3, [r2, #52]	; 0x34
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 800708a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800708e:	6453      	str	r3, [r2, #68]	; 0x44
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <HAL_PCD_MspInit+0xa0>)
 8007092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	2043      	movs	r0, #67	; 0x43
 80070a2:	f7fa f826 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070a6:	2043      	movs	r0, #67	; 0x43
 80070a8:	f7fa f83f 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070ac:	bf00      	nop
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40020000 	.word	0x40020000

080070bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f7fe fc45 	bl	8005962 <USBD_LL_SetupStage>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	4619      	mov	r1, r3
 800710a:	f7fe fc7f 	bl	8005a0c <USBD_LL_DataOutStage>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	334c      	adds	r3, #76	; 0x4c
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	4619      	mov	r1, r3
 800713e:	f7fe fd18 	bl	8005b72 <USBD_LL_DataInStage>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fe4c 	bl	8005df6 <USBD_LL_SOF>
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800716e:	2301      	movs	r3, #1
 8007170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d001      	beq.n	800717e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800717a:	f7f9 fd2d 	bl	8000bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007184:	7bfa      	ldrb	r2, [r7, #15]
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fdf6 	bl	8005d7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fd9e 	bl	8005cd6 <USBD_LL_Reset>
}
 800719a:	bf00      	nop
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fdf1 	bl	8005d9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <HAL_PCD_SuspendCallback+0x48>)
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4a03      	ldr	r2, [pc, #12]	; (80071ec <HAL_PCD_SuspendCallback+0x48>)
 80071de:	f043 0306 	orr.w	r3, r3, #6
 80071e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	e000ed00 	.word	0xe000ed00

080071f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fde1 	bl	8005dc6 <USBD_LL_Resume>
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fe39 	bl	8005e9a <USBD_LL_IsoOUTIncomplete>
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fdf5 	bl	8005e36 <USBD_LL_IsoINIncomplete>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fe4b 	bl	8005efe <USBD_LL_DevConnected>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fe48 	bl	8005f14 <USBD_LL_DevDisconnected>
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d13c      	bne.n	8007316 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <USBD_LL_Init+0x94>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <USBD_LL_Init+0x94>)
 80072a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072ac:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <USBD_LL_Init+0x94>)
 80072ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <USBD_LL_Init+0x94>)
 80072b6:	2204      	movs	r2, #4
 80072b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072ba:	4b19      	ldr	r3, [pc, #100]	; (8007320 <USBD_LL_Init+0x94>)
 80072bc:	2202      	movs	r2, #2
 80072be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072c0:	4b17      	ldr	r3, [pc, #92]	; (8007320 <USBD_LL_Init+0x94>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <USBD_LL_Init+0x94>)
 80072c8:	2202      	movs	r2, #2
 80072ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <USBD_LL_Init+0x94>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <USBD_LL_Init+0x94>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <USBD_LL_Init+0x94>)
 80072da:	2200      	movs	r2, #0
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072de:	4b10      	ldr	r3, [pc, #64]	; (8007320 <USBD_LL_Init+0x94>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072e4:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <USBD_LL_Init+0x94>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072ea:	480d      	ldr	r0, [pc, #52]	; (8007320 <USBD_LL_Init+0x94>)
 80072ec:	f7fa f8bc 	bl	8001468 <HAL_PCD_Init>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072f6:	f7f9 fc6f 	bl	8000bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	4808      	ldr	r0, [pc, #32]	; (8007320 <USBD_LL_Init+0x94>)
 80072fe:	f7fb fafc 	bl	80028fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007302:	2240      	movs	r2, #64	; 0x40
 8007304:	2100      	movs	r1, #0
 8007306:	4806      	ldr	r0, [pc, #24]	; (8007320 <USBD_LL_Init+0x94>)
 8007308:	f7fb fab0 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	2101      	movs	r1, #1
 8007310:	4803      	ldr	r0, [pc, #12]	; (8007320 <USBD_LL_Init+0x94>)
 8007312:	f7fb faab 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200006c4 	.word	0x200006c4

08007324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800733a:	4618      	mov	r0, r3
 800733c:	f7fa f9b1 	bl	80016a2 <HAL_PCD_Start>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f930 	bl	80075ac <USBD_Get_USB_Status>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007350:	7bbb      	ldrb	r3, [r7, #14]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	461a      	mov	r2, r3
 8007368:	4603      	mov	r3, r0
 800736a:	70fb      	strb	r3, [r7, #3]
 800736c:	460b      	mov	r3, r1
 800736e:	70bb      	strb	r3, [r7, #2]
 8007370:	4613      	mov	r3, r2
 8007372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007382:	78bb      	ldrb	r3, [r7, #2]
 8007384:	883a      	ldrh	r2, [r7, #0]
 8007386:	78f9      	ldrb	r1, [r7, #3]
 8007388:	f7fa fe82 	bl	8002090 <HAL_PCD_EP_Open>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f90a 	bl	80075ac <USBD_Get_USB_Status>
 8007398:	4603      	mov	r3, r0
 800739a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800739c:	7bbb      	ldrb	r3, [r7, #14]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fa fecb 	bl	8002160 <HAL_PCD_EP_Close>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 f8eb 	bl	80075ac <USBD_Get_USB_Status>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073da:	7bbb      	ldrb	r3, [r7, #14]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa ff8b 	bl	800231e <HAL_PCD_EP_SetStall>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f8cc 	bl	80075ac <USBD_Get_USB_Status>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007418:	7bbb      	ldrb	r3, [r7, #14]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7fa ffd0 	bl	80023e6 <HAL_PCD_EP_ClrStall>
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 f8ad 	bl	80075ac <USBD_Get_USB_Status>
 8007452:	4603      	mov	r3, r0
 8007454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007456:	7bbb      	ldrb	r3, [r7, #14]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	da0b      	bge.n	8007494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	4613      	mov	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	333e      	adds	r3, #62	; 0x3e
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	e00b      	b.n	80074ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80074aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fa fdb5 	bl	8002046 <HAL_PCD_SetAddress>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 f862 	bl	80075ac <USBD_Get_USB_Status>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	460b      	mov	r3, r1
 8007504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007514:	7af9      	ldrb	r1, [r7, #11]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	f7fa feb6 	bl	800228a <HAL_PCD_EP_Transmit>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 f841 	bl	80075ac <USBD_Get_USB_Status>
 800752a:	4603      	mov	r3, r0
 800752c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800752e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	460b      	mov	r3, r1
 8007546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007556:	7af9      	ldrb	r1, [r7, #11]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	f7fa fe4a 	bl	80021f4 <HAL_PCD_EP_Receive>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f820 	bl	80075ac <USBD_Get_USB_Status>
 800756c:	4603      	mov	r3, r0
 800756e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007570:	7dbb      	ldrb	r3, [r7, #22]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_static_malloc+0x18>)
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000bd0 	.word	0x20000bd0

08007598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d817      	bhi.n	80075f0 <USBD_Get_USB_Status+0x44>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <USBD_Get_USB_Status+0x1c>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075df 	.word	0x080075df
 80075d0:	080075e5 	.word	0x080075e5
 80075d4:	080075eb 	.word	0x080075eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
    break;
 80075dc:	e00b      	b.n	80075f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075de:	2303      	movs	r3, #3
 80075e0:	73fb      	strb	r3, [r7, #15]
    break;
 80075e2:	e008      	b.n	80075f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
    break;
 80075e8:	e005      	b.n	80075f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075ea:	2303      	movs	r3, #3
 80075ec:	73fb      	strb	r3, [r7, #15]
    break;
 80075ee:	e002      	b.n	80075f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	73fb      	strb	r3, [r7, #15]
    break;
 80075f4:	bf00      	nop
  }
  return usb_status;
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <__errno>:
 8007604:	4b01      	ldr	r3, [pc, #4]	; (800760c <__errno+0x8>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000110 	.word	0x20000110

08007610 <__libc_init_array>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4d0d      	ldr	r5, [pc, #52]	; (8007648 <__libc_init_array+0x38>)
 8007614:	4c0d      	ldr	r4, [pc, #52]	; (800764c <__libc_init_array+0x3c>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	2600      	movs	r6, #0
 800761c:	42a6      	cmp	r6, r4
 800761e:	d109      	bne.n	8007634 <__libc_init_array+0x24>
 8007620:	4d0b      	ldr	r5, [pc, #44]	; (8007650 <__libc_init_array+0x40>)
 8007622:	4c0c      	ldr	r4, [pc, #48]	; (8007654 <__libc_init_array+0x44>)
 8007624:	f000 fca2 	bl	8007f6c <_init>
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	2600      	movs	r6, #0
 800762e:	42a6      	cmp	r6, r4
 8007630:	d105      	bne.n	800763e <__libc_init_array+0x2e>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f855 3b04 	ldr.w	r3, [r5], #4
 8007638:	4798      	blx	r3
 800763a:	3601      	adds	r6, #1
 800763c:	e7ee      	b.n	800761c <__libc_init_array+0xc>
 800763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007642:	4798      	blx	r3
 8007644:	3601      	adds	r6, #1
 8007646:	e7f2      	b.n	800762e <__libc_init_array+0x1e>
 8007648:	0800802c 	.word	0x0800802c
 800764c:	0800802c 	.word	0x0800802c
 8007650:	0800802c 	.word	0x0800802c
 8007654:	08008030 	.word	0x08008030

08007658 <memset>:
 8007658:	4402      	add	r2, r0
 800765a:	4603      	mov	r3, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <sniprintf>:
 8007668:	b40c      	push	{r2, r3}
 800766a:	b530      	push	{r4, r5, lr}
 800766c:	4b17      	ldr	r3, [pc, #92]	; (80076cc <sniprintf+0x64>)
 800766e:	1e0c      	subs	r4, r1, #0
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	b09d      	sub	sp, #116	; 0x74
 8007674:	da08      	bge.n	8007688 <sniprintf+0x20>
 8007676:	238b      	movs	r3, #139	; 0x8b
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800767e:	b01d      	add	sp, #116	; 0x74
 8007680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007684:	b002      	add	sp, #8
 8007686:	4770      	bx	lr
 8007688:	f44f 7302 	mov.w	r3, #520	; 0x208
 800768c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007690:	bf14      	ite	ne
 8007692:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007696:	4623      	moveq	r3, r4
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076a0:	9002      	str	r0, [sp, #8]
 80076a2:	9006      	str	r0, [sp, #24]
 80076a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076aa:	ab21      	add	r3, sp, #132	; 0x84
 80076ac:	a902      	add	r1, sp, #8
 80076ae:	4628      	mov	r0, r5
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f000 f869 	bl	8007788 <_svfiprintf_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	bfbc      	itt	lt
 80076ba:	238b      	movlt	r3, #139	; 0x8b
 80076bc:	602b      	strlt	r3, [r5, #0]
 80076be:	2c00      	cmp	r4, #0
 80076c0:	d0dd      	beq.n	800767e <sniprintf+0x16>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e7d9      	b.n	800767e <sniprintf+0x16>
 80076ca:	bf00      	nop
 80076cc:	20000110 	.word	0x20000110

080076d0 <__ssputs_r>:
 80076d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	688e      	ldr	r6, [r1, #8]
 80076d6:	429e      	cmp	r6, r3
 80076d8:	4682      	mov	sl, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	4690      	mov	r8, r2
 80076de:	461f      	mov	r7, r3
 80076e0:	d838      	bhi.n	8007754 <__ssputs_r+0x84>
 80076e2:	898a      	ldrh	r2, [r1, #12]
 80076e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e8:	d032      	beq.n	8007750 <__ssputs_r+0x80>
 80076ea:	6825      	ldr	r5, [r4, #0]
 80076ec:	6909      	ldr	r1, [r1, #16]
 80076ee:	eba5 0901 	sub.w	r9, r5, r1
 80076f2:	6965      	ldr	r5, [r4, #20]
 80076f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076fc:	3301      	adds	r3, #1
 80076fe:	444b      	add	r3, r9
 8007700:	106d      	asrs	r5, r5, #1
 8007702:	429d      	cmp	r5, r3
 8007704:	bf38      	it	cc
 8007706:	461d      	movcc	r5, r3
 8007708:	0553      	lsls	r3, r2, #21
 800770a:	d531      	bpl.n	8007770 <__ssputs_r+0xa0>
 800770c:	4629      	mov	r1, r5
 800770e:	f000 fb63 	bl	8007dd8 <_malloc_r>
 8007712:	4606      	mov	r6, r0
 8007714:	b950      	cbnz	r0, 800772c <__ssputs_r+0x5c>
 8007716:	230c      	movs	r3, #12
 8007718:	f8ca 3000 	str.w	r3, [sl]
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	6921      	ldr	r1, [r4, #16]
 800772e:	464a      	mov	r2, r9
 8007730:	f000 fabe 	bl	8007cb0 <memcpy>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800773a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	6126      	str	r6, [r4, #16]
 8007742:	6165      	str	r5, [r4, #20]
 8007744:	444e      	add	r6, r9
 8007746:	eba5 0509 	sub.w	r5, r5, r9
 800774a:	6026      	str	r6, [r4, #0]
 800774c:	60a5      	str	r5, [r4, #8]
 800774e:	463e      	mov	r6, r7
 8007750:	42be      	cmp	r6, r7
 8007752:	d900      	bls.n	8007756 <__ssputs_r+0x86>
 8007754:	463e      	mov	r6, r7
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	4632      	mov	r2, r6
 800775a:	4641      	mov	r1, r8
 800775c:	f000 fab6 	bl	8007ccc <memmove>
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	1b9b      	subs	r3, r3, r6
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	4433      	add	r3, r6
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	2000      	movs	r0, #0
 800776e:	e7db      	b.n	8007728 <__ssputs_r+0x58>
 8007770:	462a      	mov	r2, r5
 8007772:	f000 fba5 	bl	8007ec0 <_realloc_r>
 8007776:	4606      	mov	r6, r0
 8007778:	2800      	cmp	r0, #0
 800777a:	d1e1      	bne.n	8007740 <__ssputs_r+0x70>
 800777c:	6921      	ldr	r1, [r4, #16]
 800777e:	4650      	mov	r0, sl
 8007780:	f000 fabe 	bl	8007d00 <_free_r>
 8007784:	e7c7      	b.n	8007716 <__ssputs_r+0x46>
	...

08007788 <_svfiprintf_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4698      	mov	r8, r3
 800778e:	898b      	ldrh	r3, [r1, #12]
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	b09d      	sub	sp, #116	; 0x74
 8007794:	4607      	mov	r7, r0
 8007796:	460d      	mov	r5, r1
 8007798:	4614      	mov	r4, r2
 800779a:	d50e      	bpl.n	80077ba <_svfiprintf_r+0x32>
 800779c:	690b      	ldr	r3, [r1, #16]
 800779e:	b963      	cbnz	r3, 80077ba <_svfiprintf_r+0x32>
 80077a0:	2140      	movs	r1, #64	; 0x40
 80077a2:	f000 fb19 	bl	8007dd8 <_malloc_r>
 80077a6:	6028      	str	r0, [r5, #0]
 80077a8:	6128      	str	r0, [r5, #16]
 80077aa:	b920      	cbnz	r0, 80077b6 <_svfiprintf_r+0x2e>
 80077ac:	230c      	movs	r3, #12
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b4:	e0d1      	b.n	800795a <_svfiprintf_r+0x1d2>
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	616b      	str	r3, [r5, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	2320      	movs	r3, #32
 80077c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c8:	2330      	movs	r3, #48	; 0x30
 80077ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007974 <_svfiprintf_r+0x1ec>
 80077ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077d2:	f04f 0901 	mov.w	r9, #1
 80077d6:	4623      	mov	r3, r4
 80077d8:	469a      	mov	sl, r3
 80077da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077de:	b10a      	cbz	r2, 80077e4 <_svfiprintf_r+0x5c>
 80077e0:	2a25      	cmp	r2, #37	; 0x25
 80077e2:	d1f9      	bne.n	80077d8 <_svfiprintf_r+0x50>
 80077e4:	ebba 0b04 	subs.w	fp, sl, r4
 80077e8:	d00b      	beq.n	8007802 <_svfiprintf_r+0x7a>
 80077ea:	465b      	mov	r3, fp
 80077ec:	4622      	mov	r2, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ff6d 	bl	80076d0 <__ssputs_r>
 80077f6:	3001      	adds	r0, #1
 80077f8:	f000 80aa 	beq.w	8007950 <_svfiprintf_r+0x1c8>
 80077fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fe:	445a      	add	r2, fp
 8007800:	9209      	str	r2, [sp, #36]	; 0x24
 8007802:	f89a 3000 	ldrb.w	r3, [sl]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80a2 	beq.w	8007950 <_svfiprintf_r+0x1c8>
 800780c:	2300      	movs	r3, #0
 800780e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007816:	f10a 0a01 	add.w	sl, sl, #1
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	9307      	str	r3, [sp, #28]
 800781e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007822:	931a      	str	r3, [sp, #104]	; 0x68
 8007824:	4654      	mov	r4, sl
 8007826:	2205      	movs	r2, #5
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	4851      	ldr	r0, [pc, #324]	; (8007974 <_svfiprintf_r+0x1ec>)
 800782e:	f7f8 fcdf 	bl	80001f0 <memchr>
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	b9d8      	cbnz	r0, 800786e <_svfiprintf_r+0xe6>
 8007836:	06d0      	lsls	r0, r2, #27
 8007838:	bf44      	itt	mi
 800783a:	2320      	movmi	r3, #32
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	0711      	lsls	r1, r2, #28
 8007842:	bf44      	itt	mi
 8007844:	232b      	movmi	r3, #43	; 0x2b
 8007846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784a:	f89a 3000 	ldrb.w	r3, [sl]
 800784e:	2b2a      	cmp	r3, #42	; 0x2a
 8007850:	d015      	beq.n	800787e <_svfiprintf_r+0xf6>
 8007852:	9a07      	ldr	r2, [sp, #28]
 8007854:	4654      	mov	r4, sl
 8007856:	2000      	movs	r0, #0
 8007858:	f04f 0c0a 	mov.w	ip, #10
 800785c:	4621      	mov	r1, r4
 800785e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007862:	3b30      	subs	r3, #48	; 0x30
 8007864:	2b09      	cmp	r3, #9
 8007866:	d94e      	bls.n	8007906 <_svfiprintf_r+0x17e>
 8007868:	b1b0      	cbz	r0, 8007898 <_svfiprintf_r+0x110>
 800786a:	9207      	str	r2, [sp, #28]
 800786c:	e014      	b.n	8007898 <_svfiprintf_r+0x110>
 800786e:	eba0 0308 	sub.w	r3, r0, r8
 8007872:	fa09 f303 	lsl.w	r3, r9, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	46a2      	mov	sl, r4
 800787c:	e7d2      	b.n	8007824 <_svfiprintf_r+0x9c>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	1d19      	adds	r1, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9103      	str	r1, [sp, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfbb      	ittet	lt
 800788a:	425b      	neglt	r3, r3
 800788c:	f042 0202 	orrlt.w	r2, r2, #2
 8007890:	9307      	strge	r3, [sp, #28]
 8007892:	9307      	strlt	r3, [sp, #28]
 8007894:	bfb8      	it	lt
 8007896:	9204      	strlt	r2, [sp, #16]
 8007898:	7823      	ldrb	r3, [r4, #0]
 800789a:	2b2e      	cmp	r3, #46	; 0x2e
 800789c:	d10c      	bne.n	80078b8 <_svfiprintf_r+0x130>
 800789e:	7863      	ldrb	r3, [r4, #1]
 80078a0:	2b2a      	cmp	r3, #42	; 0x2a
 80078a2:	d135      	bne.n	8007910 <_svfiprintf_r+0x188>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	9203      	str	r2, [sp, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfb8      	it	lt
 80078b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078b4:	3402      	adds	r4, #2
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007984 <_svfiprintf_r+0x1fc>
 80078bc:	7821      	ldrb	r1, [r4, #0]
 80078be:	2203      	movs	r2, #3
 80078c0:	4650      	mov	r0, sl
 80078c2:	f7f8 fc95 	bl	80001f0 <memchr>
 80078c6:	b140      	cbz	r0, 80078da <_svfiprintf_r+0x152>
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	eba0 000a 	sub.w	r0, r0, sl
 80078ce:	fa03 f000 	lsl.w	r0, r3, r0
 80078d2:	9b04      	ldr	r3, [sp, #16]
 80078d4:	4303      	orrs	r3, r0
 80078d6:	3401      	adds	r4, #1
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078de:	4826      	ldr	r0, [pc, #152]	; (8007978 <_svfiprintf_r+0x1f0>)
 80078e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078e4:	2206      	movs	r2, #6
 80078e6:	f7f8 fc83 	bl	80001f0 <memchr>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d038      	beq.n	8007960 <_svfiprintf_r+0x1d8>
 80078ee:	4b23      	ldr	r3, [pc, #140]	; (800797c <_svfiprintf_r+0x1f4>)
 80078f0:	bb1b      	cbnz	r3, 800793a <_svfiprintf_r+0x1b2>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	3307      	adds	r3, #7
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	3308      	adds	r3, #8
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	4433      	add	r3, r6
 8007902:	9309      	str	r3, [sp, #36]	; 0x24
 8007904:	e767      	b.n	80077d6 <_svfiprintf_r+0x4e>
 8007906:	fb0c 3202 	mla	r2, ip, r2, r3
 800790a:	460c      	mov	r4, r1
 800790c:	2001      	movs	r0, #1
 800790e:	e7a5      	b.n	800785c <_svfiprintf_r+0xd4>
 8007910:	2300      	movs	r3, #0
 8007912:	3401      	adds	r4, #1
 8007914:	9305      	str	r3, [sp, #20]
 8007916:	4619      	mov	r1, r3
 8007918:	f04f 0c0a 	mov.w	ip, #10
 800791c:	4620      	mov	r0, r4
 800791e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007922:	3a30      	subs	r2, #48	; 0x30
 8007924:	2a09      	cmp	r2, #9
 8007926:	d903      	bls.n	8007930 <_svfiprintf_r+0x1a8>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0c5      	beq.n	80078b8 <_svfiprintf_r+0x130>
 800792c:	9105      	str	r1, [sp, #20]
 800792e:	e7c3      	b.n	80078b8 <_svfiprintf_r+0x130>
 8007930:	fb0c 2101 	mla	r1, ip, r1, r2
 8007934:	4604      	mov	r4, r0
 8007936:	2301      	movs	r3, #1
 8007938:	e7f0      	b.n	800791c <_svfiprintf_r+0x194>
 800793a:	ab03      	add	r3, sp, #12
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	462a      	mov	r2, r5
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <_svfiprintf_r+0x1f8>)
 8007942:	a904      	add	r1, sp, #16
 8007944:	4638      	mov	r0, r7
 8007946:	f3af 8000 	nop.w
 800794a:	1c42      	adds	r2, r0, #1
 800794c:	4606      	mov	r6, r0
 800794e:	d1d6      	bne.n	80078fe <_svfiprintf_r+0x176>
 8007950:	89ab      	ldrh	r3, [r5, #12]
 8007952:	065b      	lsls	r3, r3, #25
 8007954:	f53f af2c 	bmi.w	80077b0 <_svfiprintf_r+0x28>
 8007958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800795a:	b01d      	add	sp, #116	; 0x74
 800795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007960:	ab03      	add	r3, sp, #12
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	462a      	mov	r2, r5
 8007966:	4b06      	ldr	r3, [pc, #24]	; (8007980 <_svfiprintf_r+0x1f8>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	4638      	mov	r0, r7
 800796c:	f000 f87a 	bl	8007a64 <_printf_i>
 8007970:	e7eb      	b.n	800794a <_svfiprintf_r+0x1c2>
 8007972:	bf00      	nop
 8007974:	08007ff0 	.word	0x08007ff0
 8007978:	08007ffa 	.word	0x08007ffa
 800797c:	00000000 	.word	0x00000000
 8007980:	080076d1 	.word	0x080076d1
 8007984:	08007ff6 	.word	0x08007ff6

08007988 <_printf_common>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	4616      	mov	r6, r2
 800798e:	4699      	mov	r9, r3
 8007990:	688a      	ldr	r2, [r1, #8]
 8007992:	690b      	ldr	r3, [r1, #16]
 8007994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007998:	4293      	cmp	r3, r2
 800799a:	bfb8      	it	lt
 800799c:	4613      	movlt	r3, r2
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a4:	4607      	mov	r7, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b10a      	cbz	r2, 80079ae <_printf_common+0x26>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	0699      	lsls	r1, r3, #26
 80079b2:	bf42      	ittt	mi
 80079b4:	6833      	ldrmi	r3, [r6, #0]
 80079b6:	3302      	addmi	r3, #2
 80079b8:	6033      	strmi	r3, [r6, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	f015 0506 	ands.w	r5, r5, #6
 80079c0:	d106      	bne.n	80079d0 <_printf_common+0x48>
 80079c2:	f104 0a19 	add.w	sl, r4, #25
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	6832      	ldr	r2, [r6, #0]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dc26      	bgt.n	8007a1e <_printf_common+0x96>
 80079d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d4:	1e13      	subs	r3, r2, #0
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	0692      	lsls	r2, r2, #26
 80079de:	d42b      	bmi.n	8007a38 <_printf_common+0xb0>
 80079e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d01e      	beq.n	8007a2c <_printf_common+0xa4>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	68e5      	ldr	r5, [r4, #12]
 80079f2:	6832      	ldr	r2, [r6, #0]
 80079f4:	f003 0306 	and.w	r3, r3, #6
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	bf08      	it	eq
 80079fc:	1aad      	subeq	r5, r5, r2
 80079fe:	68a3      	ldr	r3, [r4, #8]
 8007a00:	6922      	ldr	r2, [r4, #16]
 8007a02:	bf0c      	ite	eq
 8007a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a08:	2500      	movne	r5, #0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bfc4      	itt	gt
 8007a0e:	1a9b      	subgt	r3, r3, r2
 8007a10:	18ed      	addgt	r5, r5, r3
 8007a12:	2600      	movs	r6, #0
 8007a14:	341a      	adds	r4, #26
 8007a16:	42b5      	cmp	r5, r6
 8007a18:	d11a      	bne.n	8007a50 <_printf_common+0xc8>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e008      	b.n	8007a30 <_printf_common+0xa8>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4652      	mov	r2, sl
 8007a22:	4649      	mov	r1, r9
 8007a24:	4638      	mov	r0, r7
 8007a26:	47c0      	blx	r8
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d103      	bne.n	8007a34 <_printf_common+0xac>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7c6      	b.n	80079c6 <_printf_common+0x3e>
 8007a38:	18e1      	adds	r1, r4, r3
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	2030      	movs	r0, #48	; 0x30
 8007a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a42:	4422      	add	r2, r4
 8007a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	e7c7      	b.n	80079e0 <_printf_common+0x58>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4622      	mov	r2, r4
 8007a54:	4649      	mov	r1, r9
 8007a56:	4638      	mov	r0, r7
 8007a58:	47c0      	blx	r8
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d0e6      	beq.n	8007a2c <_printf_common+0xa4>
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7d9      	b.n	8007a16 <_printf_common+0x8e>
	...

08007a64 <_printf_i>:
 8007a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	7e0f      	ldrb	r7, [r1, #24]
 8007a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a6c:	2f78      	cmp	r7, #120	; 0x78
 8007a6e:	4691      	mov	r9, r2
 8007a70:	4680      	mov	r8, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	469a      	mov	sl, r3
 8007a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7a:	d807      	bhi.n	8007a8c <_printf_i+0x28>
 8007a7c:	2f62      	cmp	r7, #98	; 0x62
 8007a7e:	d80a      	bhi.n	8007a96 <_printf_i+0x32>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	f000 80d8 	beq.w	8007c36 <_printf_i+0x1d2>
 8007a86:	2f58      	cmp	r7, #88	; 0x58
 8007a88:	f000 80a3 	beq.w	8007bd2 <_printf_i+0x16e>
 8007a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a94:	e03a      	b.n	8007b0c <_printf_i+0xa8>
 8007a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9a:	2b15      	cmp	r3, #21
 8007a9c:	d8f6      	bhi.n	8007a8c <_printf_i+0x28>
 8007a9e:	a101      	add	r1, pc, #4	; (adr r1, 8007aa4 <_printf_i+0x40>)
 8007aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007a8d 	.word	0x08007a8d
 8007ab0:	08007a8d 	.word	0x08007a8d
 8007ab4:	08007a8d 	.word	0x08007a8d
 8007ab8:	08007a8d 	.word	0x08007a8d
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007a8d 	.word	0x08007a8d
 8007ac4:	08007a8d 	.word	0x08007a8d
 8007ac8:	08007a8d 	.word	0x08007a8d
 8007acc:	08007a8d 	.word	0x08007a8d
 8007ad0:	08007c1d 	.word	0x08007c1d
 8007ad4:	08007b41 	.word	0x08007b41
 8007ad8:	08007bff 	.word	0x08007bff
 8007adc:	08007a8d 	.word	0x08007a8d
 8007ae0:	08007a8d 	.word	0x08007a8d
 8007ae4:	08007c3f 	.word	0x08007c3f
 8007ae8:	08007a8d 	.word	0x08007a8d
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007a8d 	.word	0x08007a8d
 8007af4:	08007a8d 	.word	0x08007a8d
 8007af8:	08007c07 	.word	0x08007c07
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	1d1a      	adds	r2, r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	602a      	str	r2, [r5, #0]
 8007b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e0a3      	b.n	8007c58 <_printf_i+0x1f4>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	6829      	ldr	r1, [r5, #0]
 8007b14:	0606      	lsls	r6, r0, #24
 8007b16:	f101 0304 	add.w	r3, r1, #4
 8007b1a:	d50a      	bpl.n	8007b32 <_printf_i+0xce>
 8007b1c:	680e      	ldr	r6, [r1, #0]
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	da03      	bge.n	8007b2c <_printf_i+0xc8>
 8007b24:	232d      	movs	r3, #45	; 0x2d
 8007b26:	4276      	negs	r6, r6
 8007b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2c:	485e      	ldr	r0, [pc, #376]	; (8007ca8 <_printf_i+0x244>)
 8007b2e:	230a      	movs	r3, #10
 8007b30:	e019      	b.n	8007b66 <_printf_i+0x102>
 8007b32:	680e      	ldr	r6, [r1, #0]
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b3a:	bf18      	it	ne
 8007b3c:	b236      	sxthne	r6, r6
 8007b3e:	e7ef      	b.n	8007b20 <_printf_i+0xbc>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	6029      	str	r1, [r5, #0]
 8007b48:	0601      	lsls	r1, r0, #24
 8007b4a:	d501      	bpl.n	8007b50 <_printf_i+0xec>
 8007b4c:	681e      	ldr	r6, [r3, #0]
 8007b4e:	e002      	b.n	8007b56 <_printf_i+0xf2>
 8007b50:	0646      	lsls	r6, r0, #25
 8007b52:	d5fb      	bpl.n	8007b4c <_printf_i+0xe8>
 8007b54:	881e      	ldrh	r6, [r3, #0]
 8007b56:	4854      	ldr	r0, [pc, #336]	; (8007ca8 <_printf_i+0x244>)
 8007b58:	2f6f      	cmp	r7, #111	; 0x6f
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2308      	moveq	r3, #8
 8007b5e:	230a      	movne	r3, #10
 8007b60:	2100      	movs	r1, #0
 8007b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b66:	6865      	ldr	r5, [r4, #4]
 8007b68:	60a5      	str	r5, [r4, #8]
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	bfa2      	ittt	ge
 8007b6e:	6821      	ldrge	r1, [r4, #0]
 8007b70:	f021 0104 	bicge.w	r1, r1, #4
 8007b74:	6021      	strge	r1, [r4, #0]
 8007b76:	b90e      	cbnz	r6, 8007b7c <_printf_i+0x118>
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	d04d      	beq.n	8007c18 <_printf_i+0x1b4>
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b82:	fb03 6711 	mls	r7, r3, r1, r6
 8007b86:	5dc7      	ldrb	r7, [r0, r7]
 8007b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b8c:	4637      	mov	r7, r6
 8007b8e:	42bb      	cmp	r3, r7
 8007b90:	460e      	mov	r6, r1
 8007b92:	d9f4      	bls.n	8007b7e <_printf_i+0x11a>
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d10b      	bne.n	8007bb0 <_printf_i+0x14c>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	07de      	lsls	r6, r3, #31
 8007b9c:	d508      	bpl.n	8007bb0 <_printf_i+0x14c>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	bfde      	ittt	le
 8007ba6:	2330      	movle	r3, #48	; 0x30
 8007ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bb0:	1b52      	subs	r2, r2, r5
 8007bb2:	6122      	str	r2, [r4, #16]
 8007bb4:	f8cd a000 	str.w	sl, [sp]
 8007bb8:	464b      	mov	r3, r9
 8007bba:	aa03      	add	r2, sp, #12
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7ff fee2 	bl	8007988 <_printf_common>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d14c      	bne.n	8007c62 <_printf_i+0x1fe>
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bcc:	b004      	add	sp, #16
 8007bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd2:	4835      	ldr	r0, [pc, #212]	; (8007ca8 <_printf_i+0x244>)
 8007bd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bd8:	6829      	ldr	r1, [r5, #0]
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be0:	6029      	str	r1, [r5, #0]
 8007be2:	061d      	lsls	r5, r3, #24
 8007be4:	d514      	bpl.n	8007c10 <_printf_i+0x1ac>
 8007be6:	07df      	lsls	r7, r3, #31
 8007be8:	bf44      	itt	mi
 8007bea:	f043 0320 	orrmi.w	r3, r3, #32
 8007bee:	6023      	strmi	r3, [r4, #0]
 8007bf0:	b91e      	cbnz	r6, 8007bfa <_printf_i+0x196>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f023 0320 	bic.w	r3, r3, #32
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	2310      	movs	r3, #16
 8007bfc:	e7b0      	b.n	8007b60 <_printf_i+0xfc>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f043 0320 	orr.w	r3, r3, #32
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	2378      	movs	r3, #120	; 0x78
 8007c08:	4828      	ldr	r0, [pc, #160]	; (8007cac <_printf_i+0x248>)
 8007c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c0e:	e7e3      	b.n	8007bd8 <_printf_i+0x174>
 8007c10:	0659      	lsls	r1, r3, #25
 8007c12:	bf48      	it	mi
 8007c14:	b2b6      	uxthmi	r6, r6
 8007c16:	e7e6      	b.n	8007be6 <_printf_i+0x182>
 8007c18:	4615      	mov	r5, r2
 8007c1a:	e7bb      	b.n	8007b94 <_printf_i+0x130>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	6826      	ldr	r6, [r4, #0]
 8007c20:	6961      	ldr	r1, [r4, #20]
 8007c22:	1d18      	adds	r0, r3, #4
 8007c24:	6028      	str	r0, [r5, #0]
 8007c26:	0635      	lsls	r5, r6, #24
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	d501      	bpl.n	8007c30 <_printf_i+0x1cc>
 8007c2c:	6019      	str	r1, [r3, #0]
 8007c2e:	e002      	b.n	8007c36 <_printf_i+0x1d2>
 8007c30:	0670      	lsls	r0, r6, #25
 8007c32:	d5fb      	bpl.n	8007c2c <_printf_i+0x1c8>
 8007c34:	8019      	strh	r1, [r3, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	4615      	mov	r5, r2
 8007c3c:	e7ba      	b.n	8007bb4 <_printf_i+0x150>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	1d1a      	adds	r2, r3, #4
 8007c42:	602a      	str	r2, [r5, #0]
 8007c44:	681d      	ldr	r5, [r3, #0]
 8007c46:	6862      	ldr	r2, [r4, #4]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7f8 fad0 	bl	80001f0 <memchr>
 8007c50:	b108      	cbz	r0, 8007c56 <_printf_i+0x1f2>
 8007c52:	1b40      	subs	r0, r0, r5
 8007c54:	6060      	str	r0, [r4, #4]
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c60:	e7a8      	b.n	8007bb4 <_printf_i+0x150>
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	462a      	mov	r2, r5
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d0ab      	beq.n	8007bc8 <_printf_i+0x164>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	079b      	lsls	r3, r3, #30
 8007c74:	d413      	bmi.n	8007c9e <_printf_i+0x23a>
 8007c76:	68e0      	ldr	r0, [r4, #12]
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	bfb8      	it	lt
 8007c7e:	4618      	movlt	r0, r3
 8007c80:	e7a4      	b.n	8007bcc <_printf_i+0x168>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4632      	mov	r2, r6
 8007c86:	4649      	mov	r1, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	47d0      	blx	sl
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d09b      	beq.n	8007bc8 <_printf_i+0x164>
 8007c90:	3501      	adds	r5, #1
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	9903      	ldr	r1, [sp, #12]
 8007c96:	1a5b      	subs	r3, r3, r1
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dcf2      	bgt.n	8007c82 <_printf_i+0x21e>
 8007c9c:	e7eb      	b.n	8007c76 <_printf_i+0x212>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	f104 0619 	add.w	r6, r4, #25
 8007ca4:	e7f5      	b.n	8007c92 <_printf_i+0x22e>
 8007ca6:	bf00      	nop
 8007ca8:	08008001 	.word	0x08008001
 8007cac:	08008012 	.word	0x08008012

08007cb0 <memcpy>:
 8007cb0:	440a      	add	r2, r1
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cb8:	d100      	bne.n	8007cbc <memcpy+0xc>
 8007cba:	4770      	bx	lr
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d1f9      	bne.n	8007cbe <memcpy+0xe>
 8007cca:	bd10      	pop	{r4, pc}

08007ccc <memmove>:
 8007ccc:	4288      	cmp	r0, r1
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	eb01 0402 	add.w	r4, r1, r2
 8007cd4:	d902      	bls.n	8007cdc <memmove+0x10>
 8007cd6:	4284      	cmp	r4, r0
 8007cd8:	4623      	mov	r3, r4
 8007cda:	d807      	bhi.n	8007cec <memmove+0x20>
 8007cdc:	1e43      	subs	r3, r0, #1
 8007cde:	42a1      	cmp	r1, r4
 8007ce0:	d008      	beq.n	8007cf4 <memmove+0x28>
 8007ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cea:	e7f8      	b.n	8007cde <memmove+0x12>
 8007cec:	4402      	add	r2, r0
 8007cee:	4601      	mov	r1, r0
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	d100      	bne.n	8007cf6 <memmove+0x2a>
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cfe:	e7f7      	b.n	8007cf0 <memmove+0x24>

08007d00 <_free_r>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d044      	beq.n	8007d90 <_free_r+0x90>
 8007d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0a:	9001      	str	r0, [sp, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d12:	bfb8      	it	lt
 8007d14:	18e4      	addlt	r4, r4, r3
 8007d16:	f000 f913 	bl	8007f40 <__malloc_lock>
 8007d1a:	4a1e      	ldr	r2, [pc, #120]	; (8007d94 <_free_r+0x94>)
 8007d1c:	9801      	ldr	r0, [sp, #4]
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	b933      	cbnz	r3, 8007d30 <_free_r+0x30>
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	6014      	str	r4, [r2, #0]
 8007d26:	b003      	add	sp, #12
 8007d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d2c:	f000 b90e 	b.w	8007f4c <__malloc_unlock>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d908      	bls.n	8007d46 <_free_r+0x46>
 8007d34:	6825      	ldr	r5, [r4, #0]
 8007d36:	1961      	adds	r1, r4, r5
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	bf01      	itttt	eq
 8007d3c:	6819      	ldreq	r1, [r3, #0]
 8007d3e:	685b      	ldreq	r3, [r3, #4]
 8007d40:	1949      	addeq	r1, r1, r5
 8007d42:	6021      	streq	r1, [r4, #0]
 8007d44:	e7ed      	b.n	8007d22 <_free_r+0x22>
 8007d46:	461a      	mov	r2, r3
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b10b      	cbz	r3, 8007d50 <_free_r+0x50>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d9fa      	bls.n	8007d46 <_free_r+0x46>
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	1855      	adds	r5, r2, r1
 8007d54:	42a5      	cmp	r5, r4
 8007d56:	d10b      	bne.n	8007d70 <_free_r+0x70>
 8007d58:	6824      	ldr	r4, [r4, #0]
 8007d5a:	4421      	add	r1, r4
 8007d5c:	1854      	adds	r4, r2, r1
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	d1e0      	bne.n	8007d26 <_free_r+0x26>
 8007d64:	681c      	ldr	r4, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	4421      	add	r1, r4
 8007d6c:	6011      	str	r1, [r2, #0]
 8007d6e:	e7da      	b.n	8007d26 <_free_r+0x26>
 8007d70:	d902      	bls.n	8007d78 <_free_r+0x78>
 8007d72:	230c      	movs	r3, #12
 8007d74:	6003      	str	r3, [r0, #0]
 8007d76:	e7d6      	b.n	8007d26 <_free_r+0x26>
 8007d78:	6825      	ldr	r5, [r4, #0]
 8007d7a:	1961      	adds	r1, r4, r5
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf04      	itt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	6063      	str	r3, [r4, #4]
 8007d86:	bf04      	itt	eq
 8007d88:	1949      	addeq	r1, r1, r5
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	6054      	str	r4, [r2, #4]
 8007d8e:	e7ca      	b.n	8007d26 <_free_r+0x26>
 8007d90:	b003      	add	sp, #12
 8007d92:	bd30      	pop	{r4, r5, pc}
 8007d94:	20000be4 	.word	0x20000be4

08007d98 <sbrk_aligned>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4e0e      	ldr	r6, [pc, #56]	; (8007dd4 <sbrk_aligned+0x3c>)
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	6831      	ldr	r1, [r6, #0]
 8007da0:	4605      	mov	r5, r0
 8007da2:	b911      	cbnz	r1, 8007daa <sbrk_aligned+0x12>
 8007da4:	f000 f8bc 	bl	8007f20 <_sbrk_r>
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 f8b7 	bl	8007f20 <_sbrk_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d00a      	beq.n	8007dcc <sbrk_aligned+0x34>
 8007db6:	1cc4      	adds	r4, r0, #3
 8007db8:	f024 0403 	bic.w	r4, r4, #3
 8007dbc:	42a0      	cmp	r0, r4
 8007dbe:	d007      	beq.n	8007dd0 <sbrk_aligned+0x38>
 8007dc0:	1a21      	subs	r1, r4, r0
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 f8ac 	bl	8007f20 <_sbrk_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d101      	bne.n	8007dd0 <sbrk_aligned+0x38>
 8007dcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	20000be8 	.word	0x20000be8

08007dd8 <_malloc_r>:
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	1ccd      	adds	r5, r1, #3
 8007dde:	f025 0503 	bic.w	r5, r5, #3
 8007de2:	3508      	adds	r5, #8
 8007de4:	2d0c      	cmp	r5, #12
 8007de6:	bf38      	it	cc
 8007de8:	250c      	movcc	r5, #12
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	4607      	mov	r7, r0
 8007dee:	db01      	blt.n	8007df4 <_malloc_r+0x1c>
 8007df0:	42a9      	cmp	r1, r5
 8007df2:	d905      	bls.n	8007e00 <_malloc_r+0x28>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	2600      	movs	r6, #0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	4e2e      	ldr	r6, [pc, #184]	; (8007ebc <_malloc_r+0xe4>)
 8007e02:	f000 f89d 	bl	8007f40 <__malloc_lock>
 8007e06:	6833      	ldr	r3, [r6, #0]
 8007e08:	461c      	mov	r4, r3
 8007e0a:	bb34      	cbnz	r4, 8007e5a <_malloc_r+0x82>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7ff ffc2 	bl	8007d98 <sbrk_aligned>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	4604      	mov	r4, r0
 8007e18:	d14d      	bne.n	8007eb6 <_malloc_r+0xde>
 8007e1a:	6834      	ldr	r4, [r6, #0]
 8007e1c:	4626      	mov	r6, r4
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	d140      	bne.n	8007ea4 <_malloc_r+0xcc>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	4631      	mov	r1, r6
 8007e26:	4638      	mov	r0, r7
 8007e28:	eb04 0803 	add.w	r8, r4, r3
 8007e2c:	f000 f878 	bl	8007f20 <_sbrk_r>
 8007e30:	4580      	cmp	r8, r0
 8007e32:	d13a      	bne.n	8007eaa <_malloc_r+0xd2>
 8007e34:	6821      	ldr	r1, [r4, #0]
 8007e36:	3503      	adds	r5, #3
 8007e38:	1a6d      	subs	r5, r5, r1
 8007e3a:	f025 0503 	bic.w	r5, r5, #3
 8007e3e:	3508      	adds	r5, #8
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	bf38      	it	cc
 8007e44:	250c      	movcc	r5, #12
 8007e46:	4629      	mov	r1, r5
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff ffa5 	bl	8007d98 <sbrk_aligned>
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d02b      	beq.n	8007eaa <_malloc_r+0xd2>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	442b      	add	r3, r5
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	e00e      	b.n	8007e78 <_malloc_r+0xa0>
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	1b52      	subs	r2, r2, r5
 8007e5e:	d41e      	bmi.n	8007e9e <_malloc_r+0xc6>
 8007e60:	2a0b      	cmp	r2, #11
 8007e62:	d916      	bls.n	8007e92 <_malloc_r+0xba>
 8007e64:	1961      	adds	r1, r4, r5
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	6025      	str	r5, [r4, #0]
 8007e6a:	bf18      	it	ne
 8007e6c:	6059      	strne	r1, [r3, #4]
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	bf08      	it	eq
 8007e72:	6031      	streq	r1, [r6, #0]
 8007e74:	5162      	str	r2, [r4, r5]
 8007e76:	604b      	str	r3, [r1, #4]
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f104 060b 	add.w	r6, r4, #11
 8007e7e:	f000 f865 	bl	8007f4c <__malloc_unlock>
 8007e82:	f026 0607 	bic.w	r6, r6, #7
 8007e86:	1d23      	adds	r3, r4, #4
 8007e88:	1af2      	subs	r2, r6, r3
 8007e8a:	d0b6      	beq.n	8007dfa <_malloc_r+0x22>
 8007e8c:	1b9b      	subs	r3, r3, r6
 8007e8e:	50a3      	str	r3, [r4, r2]
 8007e90:	e7b3      	b.n	8007dfa <_malloc_r+0x22>
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	bf0c      	ite	eq
 8007e98:	6032      	streq	r2, [r6, #0]
 8007e9a:	605a      	strne	r2, [r3, #4]
 8007e9c:	e7ec      	b.n	8007e78 <_malloc_r+0xa0>
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	6864      	ldr	r4, [r4, #4]
 8007ea2:	e7b2      	b.n	8007e0a <_malloc_r+0x32>
 8007ea4:	4634      	mov	r4, r6
 8007ea6:	6876      	ldr	r6, [r6, #4]
 8007ea8:	e7b9      	b.n	8007e1e <_malloc_r+0x46>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f000 f84c 	bl	8007f4c <__malloc_unlock>
 8007eb4:	e7a1      	b.n	8007dfa <_malloc_r+0x22>
 8007eb6:	6025      	str	r5, [r4, #0]
 8007eb8:	e7de      	b.n	8007e78 <_malloc_r+0xa0>
 8007eba:	bf00      	nop
 8007ebc:	20000be4 	.word	0x20000be4

08007ec0 <_realloc_r>:
 8007ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	460e      	mov	r6, r1
 8007eca:	b921      	cbnz	r1, 8007ed6 <_realloc_r+0x16>
 8007ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	f7ff bf81 	b.w	8007dd8 <_malloc_r>
 8007ed6:	b92a      	cbnz	r2, 8007ee4 <_realloc_r+0x24>
 8007ed8:	f7ff ff12 	bl	8007d00 <_free_r>
 8007edc:	4625      	mov	r5, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee4:	f000 f838 	bl	8007f58 <_malloc_usable_size_r>
 8007ee8:	4284      	cmp	r4, r0
 8007eea:	4607      	mov	r7, r0
 8007eec:	d802      	bhi.n	8007ef4 <_realloc_r+0x34>
 8007eee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ef2:	d812      	bhi.n	8007f1a <_realloc_r+0x5a>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	f7ff ff6e 	bl	8007dd8 <_malloc_r>
 8007efc:	4605      	mov	r5, r0
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d0ed      	beq.n	8007ede <_realloc_r+0x1e>
 8007f02:	42bc      	cmp	r4, r7
 8007f04:	4622      	mov	r2, r4
 8007f06:	4631      	mov	r1, r6
 8007f08:	bf28      	it	cs
 8007f0a:	463a      	movcs	r2, r7
 8007f0c:	f7ff fed0 	bl	8007cb0 <memcpy>
 8007f10:	4631      	mov	r1, r6
 8007f12:	4640      	mov	r0, r8
 8007f14:	f7ff fef4 	bl	8007d00 <_free_r>
 8007f18:	e7e1      	b.n	8007ede <_realloc_r+0x1e>
 8007f1a:	4635      	mov	r5, r6
 8007f1c:	e7df      	b.n	8007ede <_realloc_r+0x1e>
	...

08007f20 <_sbrk_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_sbrk_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f8 fefe 	bl	8000d2c <_sbrk>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_sbrk_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_sbrk_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000bec 	.word	0x20000bec

08007f40 <__malloc_lock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_lock+0x8>)
 8007f42:	f000 b811 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000bf0 	.word	0x20000bf0

08007f4c <__malloc_unlock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__malloc_unlock+0x8>)
 8007f4e:	f000 b80c 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000bf0 	.word	0x20000bf0

08007f58 <_malloc_usable_size_r>:
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f18      	subs	r0, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbc      	itt	lt
 8007f62:	580b      	ldrlt	r3, [r1, r0]
 8007f64:	18c0      	addlt	r0, r0, r3
 8007f66:	4770      	bx	lr

08007f68 <__retarget_lock_acquire_recursive>:
 8007f68:	4770      	bx	lr

08007f6a <__retarget_lock_release_recursive>:
 8007f6a:	4770      	bx	lr

08007f6c <_init>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr

08007f78 <_fini>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr
